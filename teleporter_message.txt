1798: set reg4 to input character
1800: set reg3 to (reg4 (117) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (117) to mem[reg0 (25975)]
1810: set reg5 to (reg5 (0) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25975) + 1)
1791: set reg3 to (reg0 (25976) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (115) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (115) to mem[reg0 (25976)]
1810: set reg5 to (reg5 (1) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25976) + 1)
1791: set reg3 to (reg0 (25977) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (101) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (101) to mem[reg0 (25977)]
1810: set reg5 to (reg5 (2) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25977) + 1)
1791: set reg3 to (reg0 (25978) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (32) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (32) to mem[reg0 (25978)]
1810: set reg5 to (reg5 (3) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25978) + 1)
1791: set reg3 to (reg0 (25979) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (116) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (116) to mem[reg0 (25979)]
1810: set reg5 to (reg5 (4) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25979) + 1)
1791: set reg3 to (reg0 (25980) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (101) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (101) to mem[reg0 (25980)]
1810: set reg5 to (reg5 (5) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25980) + 1)
1791: set reg3 to (reg0 (25981) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (108) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (108) to mem[reg0 (25981)]
1810: set reg5 to (reg5 (6) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25981) + 1)
1791: set reg3 to (reg0 (25982) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (101) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (101) to mem[reg0 (25982)]
1810: set reg5 to (reg5 (7) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25982) + 1)
1791: set reg3 to (reg0 (25983) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (112) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (112) to mem[reg0 (25983)]
1810: set reg5 to (reg5 (8) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25983) + 1)
1791: set reg3 to (reg0 (25984) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (111) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (111) to mem[reg0 (25984)]
1810: set reg5 to (reg5 (9) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25984) + 1)
1791: set reg3 to (reg0 (25985) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (114) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (114) to mem[reg0 (25985)]
1810: set reg5 to (reg5 (10) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25985) + 1)
1791: set reg3 to (reg0 (25986) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (116) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (116) to mem[reg0 (25986)]
1810: set reg5 to (reg5 (11) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25986) + 1)
1791: set reg3 to (reg0 (25987) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (101) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (101) to mem[reg0 (25987)]
1810: set reg5 to (reg5 (12) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25987) + 1)
1791: set reg3 to (reg0 (25988) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (114) == 10)
1804: if reg3 (0), jump to 1816
1807: write reg4 (114) to mem[reg0 (25988)]
1810: set reg5 to (reg5 (13) + 1)
1814: jump to 1787
1787: set reg0 to (reg0 (25988) + 1)
1791: set reg3 to (reg0 (25989) > reg2 (26006))
1795: if reg3 (0), jump to 1816
1798: set reg4 to input character
1800: set reg3 to (reg4 (10) == 10)
1804: if reg3 (1), jump to 1816
1816: write reg5 (14) to mem[reg1 (25974)]
1819: set reg3 to (reg4 (10) == 10)
1823: if reg3 (1), jump to 1830
1830: pop stack and write to reg5 (14) (value: 0)
1832: pop stack and write to reg4 (10) (value: 101)
1834: pop stack and write to reg3 (1) (value: 10)
1836: pop stack and write to reg2 (26006) (value: 3)
1838: pop stack and write to reg0 (25989) (value: 32)
1840: return (addr: 2826)
2826: output 10 (
)
2828: output 10 (
)
2830: set reg0 to 25974
2833: set reg1 to 32
2836: call to 1571
1571: push reg1 (32) onto stack
1573: push reg2 (3) onto stack
1575: set reg2 to reg1 (32)
1578: set reg1 to 1605
1581: call to 1543
1543: push reg1 (1605) onto stack
1545: push reg3 (10) onto stack
1547: set reg3 to mem[reg0 (25974)] (value: 14)
1550: if !reg3 (14), jump to 1563
1553: call to 1458
1458: push reg0 (25974) onto stack
1460: push reg3 (14) onto stack
1462: push reg4 (101) onto stack
1464: push reg5 (0) onto stack
1466: push reg6 (0) onto stack
1468: set reg6 to reg0 (25974)
1471: set reg5 to reg1 (1605)
1474: set reg4 to mem[reg0 (25974)] (value: 14)
1477: set reg1 to 0
1480: set reg3 to (1 + reg1 (0))
1484: set reg0 to (reg3 (1) > reg4 (14))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (1) + reg6 (25974))
1495: set reg0 to mem[reg3 (25975)] (value: 117)
1498: call to reg5 (1605)
1605: set reg0 to (reg0 (117) == reg2 (32))
1609: if !reg0 (0), jump to 1618
1618: return (addr: 1500)
1500: set reg1 to (reg1 (0) + 1)
1504: if reg1 (1), jump to 1480
1480: set reg3 to (1 + reg1 (1))
1484: set reg0 to (reg3 (2) > reg4 (14))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (2) + reg6 (25974))
1495: set reg0 to mem[reg3 (25976)] (value: 115)
1498: call to reg5 (1605)
1605: set reg0 to (reg0 (115) == reg2 (32))
1609: if !reg0 (0), jump to 1618
1618: return (addr: 1500)
1500: set reg1 to (reg1 (1) + 1)
1504: if reg1 (2), jump to 1480
1480: set reg3 to (1 + reg1 (2))
1484: set reg0 to (reg3 (3) > reg4 (14))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (3) + reg6 (25974))
1495: set reg0 to mem[reg3 (25977)] (value: 101)
1498: call to reg5 (1605)
1605: set reg0 to (reg0 (101) == reg2 (32))
1609: if !reg0 (0), jump to 1618
1618: return (addr: 1500)
1500: set reg1 to (reg1 (2) + 1)
1504: if reg1 (3), jump to 1480
1480: set reg3 to (1 + reg1 (3))
1484: set reg0 to (reg3 (4) > reg4 (14))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (4) + reg6 (25974))
1495: set reg0 to mem[reg3 (25978)] (value: 32)
1498: call to reg5 (1605)
1605: set reg0 to (reg0 (32) == reg2 (32))
1609: if !reg0 (1), jump to 1618
1612: set reg2 to reg1 (3)
1615: set reg1 to 32767
1618: return (addr: 1500)
1500: set reg1 to (reg1 (32767) + 1)
1504: if reg1 (0), jump to 1480
1507: pop stack and write to reg6 (25974) (value: 0)
1509: pop stack and write to reg5 (1605) (value: 0)
1511: pop stack and write to reg4 (14) (value: 101)
1513: pop stack and write to reg3 (25978) (value: 14)
1515: pop stack and write to reg0 (1) (value: 25974)
1517: return (addr: 1555)
1555: if reg1 (0), jump to 1563
1558: set reg0 to reg2 (3)
1561: jump to 1566
1566: pop stack and write to reg3 (14) (value: 10)
1568: pop stack and write to reg1 (0) (value: 1605)
1570: return (addr: 1583)
1583: pop stack and write to reg2 (3) (value: 3)
1585: pop stack and write to reg1 (1605) (value: 32)
1587: return (addr: 2838)
2838: set reg1 to (reg0 (3) == 32767)
2842: if !reg1 (0), jump to 2848
2848: set reg2 to reg0 (3)
2851: set reg1 to mem[25974] (value: 14)
2854: push reg1 (14) onto stack
2856: write reg2 (3) to mem[25974]
2859: set reg0 to 27398
2862: set reg1 to 25974
2865: call to 1588
1588: push reg1 (25974) onto stack
1590: push reg2 (3) onto stack
1592: set reg2 to reg1 (25974)
1595: set reg1 to 1648
1598: call to 1543
1543: push reg1 (1648) onto stack
1545: push reg3 (10) onto stack
1547: set reg3 to mem[reg0 (27398)] (value: 7)
1550: if !reg3 (7), jump to 1563
1553: call to 1458
1458: push reg0 (27398) onto stack
1460: push reg3 (7) onto stack
1462: push reg4 (101) onto stack
1464: push reg5 (0) onto stack
1466: push reg6 (0) onto stack
1468: set reg6 to reg0 (27398)
1471: set reg5 to reg1 (1648)
1474: set reg4 to mem[reg0 (27398)] (value: 7)
1477: set reg1 to 0
1480: set reg3 to (1 + reg1 (0))
1484: set reg0 to (reg3 (1) > reg4 (7))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (1) + reg6 (27398))
1495: set reg0 to mem[reg3 (27399)] (value: 25943)
1498: call to reg5 (1648)
1648: push reg1 (0) onto stack
1650: set reg1 to reg2 (25974)
1653: call to 1667
1667: push reg1 (25974) onto stack
1669: push reg2 (25974) onto stack
1671: push reg3 (27399) onto stack
1673: push reg4 (7) onto stack
1675: set reg3 to mem[reg0 (25943)] (value: 2)
1678: set reg4 to mem[reg1 (25974)] (value: 3)
1681: set reg2 to (reg3 (2) == reg4 (3))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (3) (value: 7)
1716: pop stack and write to reg3 (2) (value: 27399)
1718: pop stack and write to reg2 (0) (value: 25974)
1720: pop stack and write to reg1 (25974) (value: 25974)
1722: return (addr: 1655)
1655: pop stack and write to reg1 (25974) (value: 0)
1657: if !reg0 (0), jump to 1666
1666: return (addr: 1500)
1500: set reg1 to (reg1 (0) + 1)
1504: if reg1 (1), jump to 1480
1480: set reg3 to (1 + reg1 (1))
1484: set reg0 to (reg3 (2) > reg4 (7))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (2) + reg6 (27398))
1495: set reg0 to mem[reg3 (27400)] (value: 25946)
1498: call to reg5 (1648)
1648: push reg1 (1) onto stack
1650: set reg1 to reg2 (25974)
1653: call to 1667
1667: push reg1 (25974) onto stack
1669: push reg2 (25974) onto stack
1671: push reg3 (27400) onto stack
1673: push reg4 (7) onto stack
1675: set reg3 to mem[reg0 (25946)] (value: 4)
1678: set reg4 to mem[reg1 (25974)] (value: 3)
1681: set reg2 to (reg3 (4) == reg4 (3))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (3) (value: 7)
1716: pop stack and write to reg3 (4) (value: 27400)
1718: pop stack and write to reg2 (0) (value: 25974)
1720: pop stack and write to reg1 (25974) (value: 25974)
1722: return (addr: 1655)
1655: pop stack and write to reg1 (25974) (value: 1)
1657: if !reg0 (0), jump to 1666
1666: return (addr: 1500)
1500: set reg1 to (reg1 (1) + 1)
1504: if reg1 (2), jump to 1480
1480: set reg3 to (1 + reg1 (2))
1484: set reg0 to (reg3 (3) > reg4 (7))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (3) + reg6 (27398))
1495: set reg0 to mem[reg3 (27401)] (value: 25951)
1498: call to reg5 (1648)
1648: push reg1 (2) onto stack
1650: set reg1 to reg2 (25974)
1653: call to 1667
1667: push reg1 (25974) onto stack
1669: push reg2 (25974) onto stack
1671: push reg3 (27401) onto stack
1673: push reg4 (7) onto stack
1675: set reg3 to mem[reg0 (25951)] (value: 4)
1678: set reg4 to mem[reg1 (25974)] (value: 3)
1681: set reg2 to (reg3 (4) == reg4 (3))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (3) (value: 7)
1716: pop stack and write to reg3 (4) (value: 27401)
1718: pop stack and write to reg2 (0) (value: 25974)
1720: pop stack and write to reg1 (25974) (value: 25974)
1722: return (addr: 1655)
1655: pop stack and write to reg1 (25974) (value: 2)
1657: if !reg0 (0), jump to 1666
1666: return (addr: 1500)
1500: set reg1 to (reg1 (2) + 1)
1504: if reg1 (3), jump to 1480
1480: set reg3 to (1 + reg1 (3))
1484: set reg0 to (reg3 (4) > reg4 (7))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (4) + reg6 (27398))
1495: set reg0 to mem[reg3 (27402)] (value: 25956)
1498: call to reg5 (1648)
1648: push reg1 (3) onto stack
1650: set reg1 to reg2 (25974)
1653: call to 1667
1667: push reg1 (25974) onto stack
1669: push reg2 (25974) onto stack
1671: push reg3 (27402) onto stack
1673: push reg4 (7) onto stack
1675: set reg3 to mem[reg0 (25956)] (value: 3)
1678: set reg4 to mem[reg1 (25974)] (value: 3)
1681: set reg2 to (reg3 (3) == reg4 (3))
1685: if !reg2 (1), jump to 1711
1688: set reg2 to (reg3 (3) | reg4 (3))
1692: if !reg2 (3), jump to 1706
1695: set reg2 to reg1 (25974)
1698: set reg1 to 1619
1701: call to 1458
1458: push reg0 (25956) onto stack
1460: push reg3 (3) onto stack
1462: push reg4 (3) onto stack
1464: push reg5 (1648) onto stack
1466: push reg6 (27398) onto stack
1468: set reg6 to reg0 (25956)
1471: set reg5 to reg1 (1619)
1474: set reg4 to mem[reg0 (25956)] (value: 3)
1477: set reg1 to 0
1480: set reg3 to (1 + reg1 (0))
1484: set reg0 to (reg3 (1) > reg4 (3))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (1) + reg6 (25956))
1495: set reg0 to mem[reg3 (25957)] (value: 105)
1498: call to reg5 (1619)
1619: push reg3 (25957) onto stack
1621: set reg3 to (reg2 (25974) + 1)
1625: set reg3 to (reg3 (25975) + reg1 (0))
1629: set reg3 to mem[reg3 (25975)] (value: 117)
1632: set reg3 to (reg0 (105) == reg3 (117))
1636: if reg3 (0), jump to 1645
1639: set reg2 to reg1 (0)
1642: set reg1 to 32767
1645: pop stack and write to reg3 (0) (value: 25957)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (32767) + 1)
1504: if reg1 (0), jump to 1480
1507: pop stack and write to reg6 (25956) (value: 27398)
1509: pop stack and write to reg5 (1619) (value: 1648)
1511: pop stack and write to reg4 (3) (value: 3)
1513: pop stack and write to reg3 (25957) (value: 3)
1515: pop stack and write to reg0 (105) (value: 25956)
1517: return (addr: 1703)
1703: if !reg1 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (3) (value: 7)
1716: pop stack and write to reg3 (3) (value: 27402)
1718: pop stack and write to reg2 (0) (value: 25974)
1720: pop stack and write to reg1 (0) (value: 25974)
1722: return (addr: 1655)
1655: pop stack and write to reg1 (25974) (value: 3)
1657: if !reg0 (0), jump to 1666
1666: return (addr: 1500)
1500: set reg1 to (reg1 (3) + 1)
1504: if reg1 (4), jump to 1480
1480: set reg3 to (1 + reg1 (4))
1484: set reg0 to (reg3 (5) > reg4 (7))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (5) + reg6 (27398))
1495: set reg0 to mem[reg3 (27403)] (value: 25960)
1498: call to reg5 (1648)
1648: push reg1 (4) onto stack
1650: set reg1 to reg2 (25974)
1653: call to 1667
1667: push reg1 (25974) onto stack
1669: push reg2 (25974) onto stack
1671: push reg3 (27403) onto stack
1673: push reg4 (7) onto stack
1675: set reg3 to mem[reg0 (25960)] (value: 4)
1678: set reg4 to mem[reg1 (25974)] (value: 3)
1681: set reg2 to (reg3 (4) == reg4 (3))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (3) (value: 7)
1716: pop stack and write to reg3 (4) (value: 27403)
1718: pop stack and write to reg2 (0) (value: 25974)
1720: pop stack and write to reg1 (25974) (value: 25974)
1722: return (addr: 1655)
1655: pop stack and write to reg1 (25974) (value: 4)
1657: if !reg0 (0), jump to 1666
1666: return (addr: 1500)
1500: set reg1 to (reg1 (4) + 1)
1504: if reg1 (5), jump to 1480
1480: set reg3 to (1 + reg1 (5))
1484: set reg0 to (reg3 (6) > reg4 (7))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (6) + reg6 (27398))
1495: set reg0 to mem[reg3 (27404)] (value: 25965)
1498: call to reg5 (1648)
1648: push reg1 (5) onto stack
1650: set reg1 to reg2 (25974)
1653: call to 1667
1667: push reg1 (25974) onto stack
1669: push reg2 (25974) onto stack
1671: push reg3 (27404) onto stack
1673: push reg4 (7) onto stack
1675: set reg3 to mem[reg0 (25965)] (value: 4)
1678: set reg4 to mem[reg1 (25974)] (value: 3)
1681: set reg2 to (reg3 (4) == reg4 (3))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (3) (value: 7)
1716: pop stack and write to reg3 (4) (value: 27404)
1718: pop stack and write to reg2 (0) (value: 25974)
1720: pop stack and write to reg1 (25974) (value: 25974)
1722: return (addr: 1655)
1655: pop stack and write to reg1 (25974) (value: 5)
1657: if !reg0 (0), jump to 1666
1666: return (addr: 1500)
1500: set reg1 to (reg1 (5) + 1)
1504: if reg1 (6), jump to 1480
1480: set reg3 to (1 + reg1 (6))
1484: set reg0 to (reg3 (7) > reg4 (7))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (7) + reg6 (27398))
1495: set reg0 to mem[reg3 (27405)] (value: 25970)
1498: call to reg5 (1648)
1648: push reg1 (6) onto stack
1650: set reg1 to reg2 (25974)
1653: call to 1667
1667: push reg1 (25974) onto stack
1669: push reg2 (25974) onto stack
1671: push reg3 (27405) onto stack
1673: push reg4 (7) onto stack
1675: set reg3 to mem[reg0 (25970)] (value: 3)
1678: set reg4 to mem[reg1 (25974)] (value: 3)
1681: set reg2 to (reg3 (3) == reg4 (3))
1685: if !reg2 (1), jump to 1711
1688: set reg2 to (reg3 (3) | reg4 (3))
1692: if !reg2 (3), jump to 1706
1695: set reg2 to reg1 (25974)
1698: set reg1 to 1619
1701: call to 1458
1458: push reg0 (25970) onto stack
1460: push reg3 (3) onto stack
1462: push reg4 (3) onto stack
1464: push reg5 (1648) onto stack
1466: push reg6 (27398) onto stack
1468: set reg6 to reg0 (25970)
1471: set reg5 to reg1 (1619)
1474: set reg4 to mem[reg0 (25970)] (value: 3)
1477: set reg1 to 0
1480: set reg3 to (1 + reg1 (0))
1484: set reg0 to (reg3 (1) > reg4 (3))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (1) + reg6 (25970))
1495: set reg0 to mem[reg3 (25971)] (value: 117)
1498: call to reg5 (1619)
1619: push reg3 (25971) onto stack
1621: set reg3 to (reg2 (25974) + 1)
1625: set reg3 to (reg3 (25975) + reg1 (0))
1629: set reg3 to mem[reg3 (25975)] (value: 117)
1632: set reg3 to (reg0 (117) == reg3 (117))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 25971)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (0) + 1)
1504: if reg1 (1), jump to 1480
1480: set reg3 to (1 + reg1 (1))
1484: set reg0 to (reg3 (2) > reg4 (3))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (2) + reg6 (25970))
1495: set reg0 to mem[reg3 (25972)] (value: 115)
1498: call to reg5 (1619)
1619: push reg3 (25972) onto stack
1621: set reg3 to (reg2 (25974) + 1)
1625: set reg3 to (reg3 (25975) + reg1 (1))
1629: set reg3 to mem[reg3 (25976)] (value: 115)
1632: set reg3 to (reg0 (115) == reg3 (115))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 25972)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (1) + 1)
1504: if reg1 (2), jump to 1480
1480: set reg3 to (1 + reg1 (2))
1484: set reg0 to (reg3 (3) > reg4 (3))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (3) + reg6 (25970))
1495: set reg0 to mem[reg3 (25973)] (value: 101)
1498: call to reg5 (1619)
1619: push reg3 (25973) onto stack
1621: set reg3 to (reg2 (25974) + 1)
1625: set reg3 to (reg3 (25975) + reg1 (2))
1629: set reg3 to mem[reg3 (25977)] (value: 101)
1632: set reg3 to (reg0 (101) == reg3 (101))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 25973)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (2) + 1)
1504: if reg1 (3), jump to 1480
1480: set reg3 to (1 + reg1 (3))
1484: set reg0 to (reg3 (4) > reg4 (3))
1488: if reg0 (1), jump to 1507
1507: pop stack and write to reg6 (25970) (value: 27398)
1509: pop stack and write to reg5 (1619) (value: 1648)
1511: pop stack and write to reg4 (3) (value: 3)
1513: pop stack and write to reg3 (4) (value: 3)
1515: pop stack and write to reg0 (1) (value: 25970)
1517: return (addr: 1703)
1703: if !reg1 (3), jump to 1711
1706: set reg0 to 1
1709: jump to 1714
1714: pop stack and write to reg4 (3) (value: 7)
1716: pop stack and write to reg3 (3) (value: 27405)
1718: pop stack and write to reg2 (25974) (value: 25974)
1720: pop stack and write to reg1 (3) (value: 25974)
1722: return (addr: 1655)
1655: pop stack and write to reg1 (25974) (value: 6)
1657: if !reg0 (1), jump to 1666
1660: set reg2 to reg1 (6)
1663: set reg1 to 32767
1666: return (addr: 1500)
1500: set reg1 to (reg1 (32767) + 1)
1504: if reg1 (0), jump to 1480
1507: pop stack and write to reg6 (27398) (value: 0)
1509: pop stack and write to reg5 (1648) (value: 0)
1511: pop stack and write to reg4 (7) (value: 101)
1513: pop stack and write to reg3 (27405) (value: 7)
1515: pop stack and write to reg0 (1) (value: 27398)
1517: return (addr: 1555)
1555: if reg1 (0), jump to 1563
1558: set reg0 to reg2 (6)
1561: jump to 1566
1566: pop stack and write to reg3 (7) (value: 10)
1568: pop stack and write to reg1 (0) (value: 1648)
1570: return (addr: 1600)
1600: pop stack and write to reg2 (6) (value: 3)
1602: pop stack and write to reg1 (1648) (value: 25974)
1604: return (addr: 2867)
2867: pop stack and write to reg1 (25974) (value: 14)
2869: write reg1 (14) to mem[25974]
2872: set reg1 to (reg0 (6) == 32767)
2876: if !reg1 (0), jump to 2885
2885: set reg1 to (27406 + 1)
2889: set reg1 to (reg1 (27407) + reg0 (6))
2893: set reg1 to mem[reg1 (27413)] (value: 3568)
2896: set reg3 to mem[25974] (value: 14)
2899: set reg3 to (reg3 (14) == reg2 (3))
2903: if reg3 (0), jump to 2944
2906: set reg0 to (reg2 (3) * 32767)
2910: set reg3 to mem[25974] (value: 14)
2913: set reg3 to (reg0 (32765) + reg3 (14))
2917: if !reg2 (3), jump to 2924
2920: set reg3 to (reg3 (11) + 32767)
2924: set reg3 to (reg3 (10) % 32)
2928: set reg0 to (25974 + reg2 (3))
2932: if !reg2 (3), jump to 2939
2935: set reg0 to (reg0 (25977) + 1)
2939: write reg3 (10) to mem[reg0 (25978)]
2942: jump to 2950
2950: call to reg1 (3568)
3568: push reg0 (25978) onto stack
3570: push reg1 (3568) onto stack
3572: call to 5921
5921: push reg1 (3568) onto stack
5923: push reg2 (3) onto stack
5925: set reg2 to reg0 (25978)
5928: set reg0 to 27381
5931: set reg1 to 5964
5934: call to 1543
1543: push reg1 (5964) onto stack
1545: push reg3 (10) onto stack
1547: set reg3 to mem[reg0 (27381)] (value: 16)
1550: if !reg3 (16), jump to 1563
1553: call to 1458
1458: push reg0 (27381) onto stack
1460: push reg3 (16) onto stack
1462: push reg4 (101) onto stack
1464: push reg5 (0) onto stack
1466: push reg6 (0) onto stack
1468: set reg6 to reg0 (27381)
1471: set reg5 to reg1 (5964)
1474: set reg4 to mem[reg0 (27381)] (value: 16)
1477: set reg1 to 0
1480: set reg3 to (1 + reg1 (0))
1484: set reg0 to (reg3 (1) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (1) + reg6 (27381))
1495: set reg0 to mem[reg3 (27382)] (value: 2668)
1498: call to reg5 (5964)
5964: push reg1 (0) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2668) + 0)
5973: set reg0 to mem[reg0 (2668)] (value: 18062)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27382) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18062)] (value: 6)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (6) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (6) (value: 27382)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 0)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (0) + 1)
1504: if reg1 (1), jump to 1480
1480: set reg3 to (1 + reg1 (1))
1484: set reg0 to (reg3 (2) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (2) + reg6 (27381))
1495: set reg0 to mem[reg3 (27383)] (value: 2672)
1498: call to reg5 (5964)
5964: push reg1 (1) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2672) + 0)
5973: set reg0 to mem[reg0 (2672)] (value: 18206)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27383) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18206)] (value: 13)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (13) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (13) (value: 27383)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 1)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (1) + 1)
1504: if reg1 (2), jump to 1480
1480: set reg3 to (1 + reg1 (2))
1484: set reg0 to (reg3 (3) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (3) + reg6 (27381))
1495: set reg0 to mem[reg3 (27384)] (value: 2676)
1498: call to reg5 (5964)
5964: push reg1 (2) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2676) + 0)
5973: set reg0 to mem[reg0 (2676)] (value: 18344)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27384) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18344)] (value: 7)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (7) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (7) (value: 27384)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 2)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (2) + 1)
1504: if reg1 (3), jump to 1480
1480: set reg3 to (1 + reg1 (3))
1484: set reg0 to (reg3 (4) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (4) + reg6 (27381))
1495: set reg0 to mem[reg3 (27385)] (value: 2680)
1498: call to reg5 (5964)
5964: push reg1 (3) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2680) + 0)
5973: set reg0 to mem[reg0 (2680)] (value: 18468)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27385) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18468)] (value: 11)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (11) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (11) (value: 27385)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 3)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (3) + 1)
1504: if reg1 (4), jump to 1480
1480: set reg3 to (1 + reg1 (4))
1484: set reg0 to (reg3 (5) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (5) + reg6 (27381))
1495: set reg0 to mem[reg3 (27386)] (value: 2684)
1498: call to reg5 (5964)
5964: push reg1 (4) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2684) + 0)
5973: set reg0 to mem[reg0 (2684)] (value: 18568)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27386) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18568)] (value: 3)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (3) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (3) (value: 27386)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 4)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (4) + 1)
1504: if reg1 (5), jump to 1480
1480: set reg3 to (1 + reg1 (5))
1484: set reg0 to (reg3 (6) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (6) + reg6 (27381))
1495: set reg0 to mem[reg3 (27387)] (value: 2688)
1498: call to reg5 (5964)
5964: push reg1 (5) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2688) + 0)
5973: set reg0 to mem[reg0 (2688)] (value: 18618)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27387) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18618)] (value: 8)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (8) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (8) (value: 27387)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 5)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (5) + 1)
1504: if reg1 (6), jump to 1480
1480: set reg3 to (1 + reg1 (6))
1484: set reg0 to (reg3 (7) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (7) + reg6 (27381))
1495: set reg0 to mem[reg3 (27388)] (value: 2692)
1498: call to reg5 (5964)
5964: push reg1 (6) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2692) + 0)
5973: set reg0 to mem[reg0 (2692)] (value: 18691)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27388) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18691)] (value: 13)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (13) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (13) (value: 27388)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 6)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (6) + 1)
1504: if reg1 (7), jump to 1480
1480: set reg3 to (1 + reg1 (7))
1484: set reg0 to (reg3 (8) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (8) + reg6 (27381))
1495: set reg0 to mem[reg3 (27389)] (value: 2696)
1498: call to reg5 (5964)
5964: push reg1 (7) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2696) + 0)
5973: set reg0 to mem[reg0 (2696)] (value: 18769)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27389) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18769)] (value: 10)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (10) == reg4 (10))
1685: if !reg2 (1), jump to 1711
1688: set reg2 to (reg3 (10) | reg4 (10))
1692: if !reg2 (10), jump to 1706
1695: set reg2 to reg1 (25978)
1698: set reg1 to 1619
1701: call to 1458
1458: push reg0 (18769) onto stack
1460: push reg3 (10) onto stack
1462: push reg4 (10) onto stack
1464: push reg5 (5964) onto stack
1466: push reg6 (27381) onto stack
1468: set reg6 to reg0 (18769)
1471: set reg5 to reg1 (1619)
1474: set reg4 to mem[reg0 (18769)] (value: 10)
1477: set reg1 to 0
1480: set reg3 to (1 + reg1 (0))
1484: set reg0 to (reg3 (1) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (1) + reg6 (18769))
1495: set reg0 to mem[reg3 (18770)] (value: 115)
1498: call to reg5 (1619)
1619: push reg3 (18770) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (0))
1629: set reg3 to mem[reg3 (25979)] (value: 116)
1632: set reg3 to (reg0 (115) == reg3 (116))
1636: if reg3 (0), jump to 1645
1639: set reg2 to reg1 (0)
1642: set reg1 to 32767
1645: pop stack and write to reg3 (0) (value: 18770)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (32767) + 1)
1504: if reg1 (0), jump to 1480
1507: pop stack and write to reg6 (18769) (value: 27381)
1509: pop stack and write to reg5 (1619) (value: 5964)
1511: pop stack and write to reg4 (10) (value: 10)
1513: pop stack and write to reg3 (18770) (value: 10)
1515: pop stack and write to reg0 (115) (value: 18769)
1517: return (addr: 1703)
1703: if !reg1 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (10) (value: 27389)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (0) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 7)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (7) + 1)
1504: if reg1 (8), jump to 1480
1480: set reg3 to (1 + reg1 (8))
1484: set reg0 to (reg3 (9) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (9) + reg6 (27381))
1495: set reg0 to mem[reg3 (27390)] (value: 2700)
1498: call to reg5 (5964)
5964: push reg1 (8) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2700) + 0)
5973: set reg0 to mem[reg0 (2700)] (value: 18852)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27390) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18852)] (value: 12)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (12) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (12) (value: 27390)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 8)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (8) + 1)
1504: if reg1 (9), jump to 1480
1480: set reg3 to (1 + reg1 (9))
1484: set reg0 to (reg3 (10) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (10) + reg6 (27381))
1495: set reg0 to mem[reg3 (27391)] (value: 2704)
1498: call to reg5 (5964)
5964: push reg1 (9) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2704) + 0)
5973: set reg0 to mem[reg0 (2704)] (value: 18953)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27391) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (18953)] (value: 9)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (9) == reg4 (10))
1685: if !reg2 (0), jump to 1711
1711: set reg0 to 0
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (9) (value: 27391)
1718: pop stack and write to reg2 (0) (value: 25978)
1720: pop stack and write to reg1 (25978) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 9)
5980: if !reg0 (0), jump to 5989
5989: return (addr: 1500)
1500: set reg1 to (reg1 (9) + 1)
1504: if reg1 (10), jump to 1480
1480: set reg3 to (1 + reg1 (10))
1484: set reg0 to (reg3 (11) > reg4 (16))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (11) + reg6 (27381))
1495: set reg0 to mem[reg3 (27392)] (value: 2708)
1498: call to reg5 (5964)
5964: push reg1 (10) onto stack
5966: set reg1 to reg2 (25978)
5969: set reg0 to (reg0 (2708) + 0)
5973: set reg0 to mem[reg0 (2708)] (value: 19029)
5976: call to 1667
1667: push reg1 (25978) onto stack
1669: push reg2 (25978) onto stack
1671: push reg3 (27392) onto stack
1673: push reg4 (16) onto stack
1675: set reg3 to mem[reg0 (19029)] (value: 10)
1678: set reg4 to mem[reg1 (25978)] (value: 10)
1681: set reg2 to (reg3 (10) == reg4 (10))
1685: if !reg2 (1), jump to 1711
1688: set reg2 to (reg3 (10) | reg4 (10))
1692: if !reg2 (10), jump to 1706
1695: set reg2 to reg1 (25978)
1698: set reg1 to 1619
1701: call to 1458
1458: push reg0 (19029) onto stack
1460: push reg3 (10) onto stack
1462: push reg4 (10) onto stack
1464: push reg5 (5964) onto stack
1466: push reg6 (27381) onto stack
1468: set reg6 to reg0 (19029)
1471: set reg5 to reg1 (1619)
1474: set reg4 to mem[reg0 (19029)] (value: 10)
1477: set reg1 to 0
1480: set reg3 to (1 + reg1 (0))
1484: set reg0 to (reg3 (1) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (1) + reg6 (19029))
1495: set reg0 to mem[reg3 (19030)] (value: 116)
1498: call to reg5 (1619)
1619: push reg3 (19030) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (0))
1629: set reg3 to mem[reg3 (25979)] (value: 116)
1632: set reg3 to (reg0 (116) == reg3 (116))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19030)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (0) + 1)
1504: if reg1 (1), jump to 1480
1480: set reg3 to (1 + reg1 (1))
1484: set reg0 to (reg3 (2) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (2) + reg6 (19029))
1495: set reg0 to mem[reg3 (19031)] (value: 101)
1498: call to reg5 (1619)
1619: push reg3 (19031) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (1))
1629: set reg3 to mem[reg3 (25980)] (value: 101)
1632: set reg3 to (reg0 (101) == reg3 (101))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19031)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (1) + 1)
1504: if reg1 (2), jump to 1480
1480: set reg3 to (1 + reg1 (2))
1484: set reg0 to (reg3 (3) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (3) + reg6 (19029))
1495: set reg0 to mem[reg3 (19032)] (value: 108)
1498: call to reg5 (1619)
1619: push reg3 (19032) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (2))
1629: set reg3 to mem[reg3 (25981)] (value: 108)
1632: set reg3 to (reg0 (108) == reg3 (108))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19032)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (2) + 1)
1504: if reg1 (3), jump to 1480
1480: set reg3 to (1 + reg1 (3))
1484: set reg0 to (reg3 (4) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (4) + reg6 (19029))
1495: set reg0 to mem[reg3 (19033)] (value: 101)
1498: call to reg5 (1619)
1619: push reg3 (19033) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (3))
1629: set reg3 to mem[reg3 (25982)] (value: 101)
1632: set reg3 to (reg0 (101) == reg3 (101))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19033)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (3) + 1)
1504: if reg1 (4), jump to 1480
1480: set reg3 to (1 + reg1 (4))
1484: set reg0 to (reg3 (5) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (5) + reg6 (19029))
1495: set reg0 to mem[reg3 (19034)] (value: 112)
1498: call to reg5 (1619)
1619: push reg3 (19034) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (4))
1629: set reg3 to mem[reg3 (25983)] (value: 112)
1632: set reg3 to (reg0 (112) == reg3 (112))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19034)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (4) + 1)
1504: if reg1 (5), jump to 1480
1480: set reg3 to (1 + reg1 (5))
1484: set reg0 to (reg3 (6) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (6) + reg6 (19029))
1495: set reg0 to mem[reg3 (19035)] (value: 111)
1498: call to reg5 (1619)
1619: push reg3 (19035) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (5))
1629: set reg3 to mem[reg3 (25984)] (value: 111)
1632: set reg3 to (reg0 (111) == reg3 (111))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19035)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (5) + 1)
1504: if reg1 (6), jump to 1480
1480: set reg3 to (1 + reg1 (6))
1484: set reg0 to (reg3 (7) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (7) + reg6 (19029))
1495: set reg0 to mem[reg3 (19036)] (value: 114)
1498: call to reg5 (1619)
1619: push reg3 (19036) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (6))
1629: set reg3 to mem[reg3 (25985)] (value: 114)
1632: set reg3 to (reg0 (114) == reg3 (114))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19036)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (6) + 1)
1504: if reg1 (7), jump to 1480
1480: set reg3 to (1 + reg1 (7))
1484: set reg0 to (reg3 (8) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (8) + reg6 (19029))
1495: set reg0 to mem[reg3 (19037)] (value: 116)
1498: call to reg5 (1619)
1619: push reg3 (19037) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (7))
1629: set reg3 to mem[reg3 (25986)] (value: 116)
1632: set reg3 to (reg0 (116) == reg3 (116))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19037)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (7) + 1)
1504: if reg1 (8), jump to 1480
1480: set reg3 to (1 + reg1 (8))
1484: set reg0 to (reg3 (9) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (9) + reg6 (19029))
1495: set reg0 to mem[reg3 (19038)] (value: 101)
1498: call to reg5 (1619)
1619: push reg3 (19038) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (8))
1629: set reg3 to mem[reg3 (25987)] (value: 101)
1632: set reg3 to (reg0 (101) == reg3 (101))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19038)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (8) + 1)
1504: if reg1 (9), jump to 1480
1480: set reg3 to (1 + reg1 (9))
1484: set reg0 to (reg3 (10) > reg4 (10))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (10) + reg6 (19029))
1495: set reg0 to mem[reg3 (19039)] (value: 114)
1498: call to reg5 (1619)
1619: push reg3 (19039) onto stack
1621: set reg3 to (reg2 (25978) + 1)
1625: set reg3 to (reg3 (25979) + reg1 (9))
1629: set reg3 to mem[reg3 (25988)] (value: 114)
1632: set reg3 to (reg0 (114) == reg3 (114))
1636: if reg3 (1), jump to 1645
1645: pop stack and write to reg3 (1) (value: 19039)
1647: return (addr: 1500)
1500: set reg1 to (reg1 (9) + 1)
1504: if reg1 (10), jump to 1480
1480: set reg3 to (1 + reg1 (10))
1484: set reg0 to (reg3 (11) > reg4 (10))
1488: if reg0 (1), jump to 1507
1507: pop stack and write to reg6 (19029) (value: 27381)
1509: pop stack and write to reg5 (1619) (value: 5964)
1511: pop stack and write to reg4 (10) (value: 10)
1513: pop stack and write to reg3 (11) (value: 10)
1515: pop stack and write to reg0 (1) (value: 19029)
1517: return (addr: 1703)
1703: if !reg1 (10), jump to 1711
1706: set reg0 to 1
1709: jump to 1714
1714: pop stack and write to reg4 (10) (value: 16)
1716: pop stack and write to reg3 (10) (value: 27392)
1718: pop stack and write to reg2 (25978) (value: 25978)
1720: pop stack and write to reg1 (10) (value: 25978)
1722: return (addr: 5978)
5978: pop stack and write to reg1 (25978) (value: 10)
5980: if !reg0 (1), jump to 5989
5983: set reg2 to reg1 (10)
5986: set reg1 to 32767
5989: return (addr: 1500)
1500: set reg1 to (reg1 (32767) + 1)
1504: if reg1 (0), jump to 1480
1507: pop stack and write to reg6 (27381) (value: 0)
1509: pop stack and write to reg5 (5964) (value: 0)
1511: pop stack and write to reg4 (16) (value: 101)
1513: pop stack and write to reg3 (27392) (value: 16)
1515: pop stack and write to reg0 (1) (value: 27381)
1517: return (addr: 1555)
1555: if reg1 (0), jump to 1563
1558: set reg0 to reg2 (10)
1561: jump to 1566
1566: pop stack and write to reg3 (16) (value: 10)
1568: pop stack and write to reg1 (0) (value: 5964)
1570: return (addr: 5936)
5936: set reg1 to (reg0 (10) == 32767)
5940: if reg1 (0), jump to 5956
5943: set reg1 to (27381 + reg0 (10))
5947: set reg1 to (reg1 (27391) + 1)
5951: set reg0 to mem[reg1 (27392)] (value: 2708)
5954: jump to 5959
5959: pop stack and write to reg2 (10) (value: 3)
5961: pop stack and write to reg1 (27392) (value: 3568)
5963: return (addr: 3574)
3574: if !reg0 (2708), jump to 3601
3577: set reg1 to (reg0 (2708) + 2)
3581: set reg1 to mem[reg1 (2710)] (value: 0)
3584: if reg1 (0), jump to 3601
3587: set reg1 to (reg0 (2708) + 3)
3591: set reg1 to mem[reg1 (2711)] (value: 5445)
3594: if !reg1 (5445), jump to 3627
3597: call to reg1 (5445)
5445: push reg0 (2708) onto stack
5447: push reg1 (5445) onto stack
5449: push reg2 (3) onto stack
5451: if !reg7 (1), jump to 5605
5454: push reg0 (2708) onto stack
5456: push reg1 (5445) onto stack
5458: push reg2 (3) onto stack
5460: set reg0 to 28844
5463: set reg1 to 1531
5466: set reg2 to (1758 + 1925)
5470: call to 1458
1458: push reg0 (28844) onto stack
1460: push reg3 (10) onto stack
1462: push reg4 (101) onto stack
1464: push reg5 (0) onto stack
1466: push reg6 (0) onto stack
1468: set reg6 to reg0 (28844)
1471: set reg5 to reg1 (1531)
1474: set reg4 to mem[reg0 (28844)] (value: 169)
1477: set reg1 to 0
1480: set reg3 to (1 + reg1 (0))
1484: set reg0 to (reg3 (1) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (1) + reg6 (28844))
1495: set reg0 to mem[reg3 (28845)] (value: 3618)
1498: call to reg5 (1531)
1531: push reg1 (0) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3618) & reg1 (3683))
2133: set reg2 to ~reg2 (3618)
2136: set reg0 to (reg0 (3618) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29149))
2144: pop stack and write to reg2 (29149) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (65) (A)
1540: pop stack and write to reg1 (3683) (value: 0)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (0) + 1)
1504: if reg1 (1), jump to 1480
1480: set reg3 to (1 + reg1 (1))
1484: set reg0 to (reg3 (2) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (2) + reg6 (28844))
1495: set reg0 to mem[reg3 (28846)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (1) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 1)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (1) + 1)
1504: if reg1 (2), jump to 1480
1480: set reg3 to (1 + reg1 (2))
1484: set reg0 to (reg3 (3) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (3) + reg6 (28844))
1495: set reg0 to mem[reg3 (28847)] (value: 3600)
1498: call to reg5 (1531)
1531: push reg1 (2) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3600) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3600) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (115) (s)
1540: pop stack and write to reg1 (3683) (value: 2)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (2) + 1)
1504: if reg1 (3), jump to 1480
1480: set reg3 to (1 + reg1 (3))
1484: set reg0 to (reg3 (4) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (4) + reg6 (28844))
1495: set reg0 to mem[reg3 (28848)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (3) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 3)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (3) + 1)
1504: if reg1 (4), jump to 1480
1480: set reg3 to (1 + reg1 (4))
1484: set reg0 to (reg3 (5) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (5) + reg6 (28844))
1495: set reg0 to mem[reg3 (28849)] (value: 3601)
1498: call to reg5 (1531)
1531: push reg1 (4) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3601) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3601) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (114) (r)
1540: pop stack and write to reg1 (3683) (value: 4)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (4) + 1)
1504: if reg1 (5), jump to 1480
1480: set reg3 to (1 + reg1 (5))
1484: set reg0 to (reg3 (6) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (6) + reg6 (28844))
1495: set reg0 to mem[reg3 (28850)] (value: 3586)
1498: call to reg5 (1531)
1531: push reg1 (5) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3586) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3586) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (97) (a)
1540: pop stack and write to reg1 (3683) (value: 5)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (5) + 1)
1504: if reg1 (6), jump to 1480
1480: set reg3 to (1 + reg1 (6))
1484: set reg0 to (reg3 (7) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (7) + reg6 (28844))
1495: set reg0 to mem[reg3 (28851)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (6) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 6)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (6) + 1)
1504: if reg1 (7), jump to 1480
1480: set reg3 to (1 + reg1 (7))
1484: set reg0 to (reg3 (8) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (8) + reg6 (28844))
1495: set reg0 to mem[reg3 (28852)] (value: 3588)
1498: call to reg5 (1531)
1531: push reg1 (7) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3588) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3588) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (103) (g)
1540: pop stack and write to reg1 (3683) (value: 7)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (7) + 1)
1504: if reg1 (8), jump to 1480
1480: set reg3 to (1 + reg1 (8))
1484: set reg0 to (reg3 (9) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (9) + reg6 (28844))
1495: set reg0 to mem[reg3 (28853)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (8) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 8)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (8) + 1)
1504: if reg1 (9), jump to 1480
1480: set reg3 to (1 + reg1 (9))
1484: set reg0 to (reg3 (10) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (10) + reg6 (28844))
1495: set reg0 to mem[reg3 (28854)] (value: 3663)
1498: call to reg5 (1531)
1531: push reg1 (9) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3663) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3663) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (44) (,)
1540: pop stack and write to reg1 (3683) (value: 9)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (9) + 1)
1504: if reg1 (10), jump to 1480
1480: set reg3 to (1 + reg1 (10))
1484: set reg0 to (reg3 (11) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (11) + reg6 (28844))
1495: set reg0 to mem[reg3 (28855)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (10) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 10)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (10) + 1)
1504: if reg1 (11), jump to 1480
1480: set reg3 to (1 + reg1 (11))
1484: set reg0 to (reg3 (12) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (12) + reg6 (28844))
1495: set reg0 to mem[reg3 (28856)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (11) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 11)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (11) + 1)
1504: if reg1 (12), jump to 1480
1480: set reg3 to (1 + reg1 (12))
1484: set reg0 to (reg3 (13) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (13) + reg6 (28844))
1495: set reg0 to mem[reg3 (28857)] (value: 3599)
1498: call to reg5 (1531)
1531: push reg1 (12) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3599) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3599) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (108) (l)
1540: pop stack and write to reg1 (3683) (value: 12)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (12) + 1)
1504: if reg1 (13), jump to 1480
1480: set reg3 to (1 + reg1 (13))
1484: set reg0 to (reg3 (14) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (14) + reg6 (28844))
1495: set reg0 to mem[reg3 (28858)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (13) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 13)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (13) + 1)
1504: if reg1 (14), jump to 1480
1480: set reg3 to (1 + reg1 (14))
1484: set reg0 to (reg3 (15) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (15) + reg6 (28844))
1495: set reg0 to mem[reg3 (28859)] (value: 3584)
1498: call to reg5 (1531)
1531: push reg1 (14) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3584) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3584) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (99) (c)
1540: pop stack and write to reg1 (3683) (value: 14)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (14) + 1)
1504: if reg1 (15), jump to 1480
1480: set reg3 to (1 + reg1 (15))
1484: set reg0 to (reg3 (16) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (16) + reg6 (28844))
1495: set reg0 to mem[reg3 (28860)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (15) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 15)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (15) + 1)
1504: if reg1 (16), jump to 1480
1480: set reg3 to (1 + reg1 (16))
1484: set reg0 to (reg3 (17) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (17) + reg6 (28844))
1495: set reg0 to mem[reg3 (28861)] (value: 3601)
1498: call to reg5 (1531)
1531: push reg1 (16) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3601) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3601) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (114) (r)
1540: pop stack and write to reg1 (3683) (value: 16)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (16) + 1)
1504: if reg1 (17), jump to 1480
1480: set reg3 to (1 + reg1 (17))
1484: set reg0 to (reg3 (18) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (18) + reg6 (28844))
1495: set reg0 to mem[reg3 (28862)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (17) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 17)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (17) + 1)
1504: if reg1 (18), jump to 1480
1480: set reg3 to (1 + reg1 (18))
1484: set reg0 to (reg3 (19) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (19) + reg6 (28844))
1495: set reg0 to mem[reg3 (28863)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (18) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 18)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (18) + 1)
1504: if reg1 (19), jump to 1480
1480: set reg3 to (1 + reg1 (19))
1484: set reg0 to (reg3 (20) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (20) + reg6 (28844))
1495: set reg0 to mem[reg3 (28864)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (19) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 19)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (19) + 1)
1504: if reg1 (20), jump to 1480
1480: set reg3 to (1 + reg1 (20))
1484: set reg0 to (reg3 (21) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (21) + reg6 (28844))
1495: set reg0 to mem[reg3 (28865)] (value: 3584)
1498: call to reg5 (1531)
1531: push reg1 (20) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3584) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3584) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (99) (c)
1540: pop stack and write to reg1 (3683) (value: 20)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (20) + 1)
1504: if reg1 (21), jump to 1480
1480: set reg3 to (1 + reg1 (21))
1484: set reg0 to (reg3 (22) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (22) + reg6 (28844))
1495: set reg0 to mem[reg3 (28866)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (21) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 21)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (21) + 1)
1504: if reg1 (22), jump to 1480
1480: set reg3 to (1 + reg1 (22))
1484: set reg0 to (reg3 (23) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (23) + reg6 (28844))
1495: set reg0 to mem[reg3 (28867)] (value: 3605)
1498: call to reg5 (1531)
1531: push reg1 (22) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3605) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3605) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (118) (v)
1540: pop stack and write to reg1 (3683) (value: 22)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (22) + 1)
1504: if reg1 (23), jump to 1480
1480: set reg3 to (1 + reg1 (23))
1484: set reg0 to (reg3 (24) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (24) + reg6 (28844))
1495: set reg0 to mem[reg3 (28868)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (23) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 23)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (23) + 1)
1504: if reg1 (24), jump to 1480
1480: set reg3 to (1 + reg1 (24))
1484: set reg0 to (reg3 (25) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (25) + reg6 (28844))
1495: set reg0 to mem[reg3 (28869)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (24) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 24)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (24) + 1)
1504: if reg1 (25), jump to 1480
1480: set reg3 to (1 + reg1 (25))
1484: set reg0 to (reg3 (26) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (26) + reg6 (28844))
1495: set reg0 to mem[reg3 (28870)] (value: 3584)
1498: call to reg5 (1531)
1531: push reg1 (25) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3584) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3584) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (99) (c)
1540: pop stack and write to reg1 (3683) (value: 25)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (25) + 1)
1504: if reg1 (26), jump to 1480
1480: set reg3 to (1 + reg1 (26))
1484: set reg0 to (reg3 (27) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (27) + reg6 (28844))
1495: set reg0 to mem[reg3 (28871)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (26) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 26)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (26) + 1)
1504: if reg1 (27), jump to 1480
1480: set reg3 to (1 + reg1 (27))
1484: set reg0 to (reg3 (28) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (28) + reg6 (28844))
1495: set reg0 to mem[reg3 (28872)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (27) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 27)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (27) + 1)
1504: if reg1 (28), jump to 1480
1480: set reg3 to (1 + reg1 (28))
1484: set reg0 to (reg3 (29) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (29) + reg6 (28844))
1495: set reg0 to mem[reg3 (28873)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (28) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 28)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (28) + 1)
1504: if reg1 (29), jump to 1480
1480: set reg3 to (1 + reg1 (29))
1484: set reg0 to (reg3 (30) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (30) + reg6 (28844))
1495: set reg0 to mem[reg3 (28874)] (value: 3600)
1498: call to reg5 (1531)
1531: push reg1 (29) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3600) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3600) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (115) (s)
1540: pop stack and write to reg1 (3683) (value: 29)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (29) + 1)
1504: if reg1 (30), jump to 1480
1480: set reg3 to (1 + reg1 (30))
1484: set reg0 to (reg3 (31) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (31) + reg6 (28844))
1495: set reg0 to mem[reg3 (28875)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (30) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 30)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (30) + 1)
1504: if reg1 (31), jump to 1480
1480: set reg3 to (1 + reg1 (31))
1484: set reg0 to (reg3 (32) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (32) + reg6 (28844))
1495: set reg0 to mem[reg3 (28876)] (value: 3603)
1498: call to reg5 (1531)
1531: push reg1 (31) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3603) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3603) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (112) (p)
1540: pop stack and write to reg1 (3683) (value: 31)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (31) + 1)
1504: if reg1 (32), jump to 1480
1480: set reg3 to (1 + reg1 (32))
1484: set reg0 to (reg3 (33) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (33) + reg6 (28844))
1495: set reg0 to mem[reg3 (28877)] (value: 3601)
1498: call to reg5 (1531)
1531: push reg1 (32) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3601) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3601) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (114) (r)
1540: pop stack and write to reg1 (3683) (value: 32)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (32) + 1)
1504: if reg1 (33), jump to 1480
1480: set reg3 to (1 + reg1 (33))
1484: set reg0 to (reg3 (34) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (34) + reg6 (28844))
1495: set reg0 to mem[reg3 (28878)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (33) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 33)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (33) + 1)
1504: if reg1 (34), jump to 1480
1480: set reg3 to (1 + reg1 (34))
1484: set reg0 to (reg3 (35) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (35) + reg6 (28844))
1495: set reg0 to mem[reg3 (28879)] (value: 3593)
1498: call to reg5 (1531)
1531: push reg1 (34) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3593) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3593) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (106) (j)
1540: pop stack and write to reg1 (3683) (value: 34)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (34) + 1)
1504: if reg1 (35), jump to 1480
1480: set reg3 to (1 + reg1 (35))
1484: set reg0 to (reg3 (36) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (36) + reg6 (28844))
1495: set reg0 to mem[reg3 (28880)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (35) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 35)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (35) + 1)
1504: if reg1 (36), jump to 1480
1480: set reg3 to (1 + reg1 (36))
1484: set reg0 to (reg3 (37) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (37) + reg6 (28844))
1495: set reg0 to mem[reg3 (28881)] (value: 3584)
1498: call to reg5 (1531)
1531: push reg1 (36) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3584) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3584) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (99) (c)
1540: pop stack and write to reg1 (3683) (value: 36)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (36) + 1)
1504: if reg1 (37), jump to 1480
1480: set reg3 to (1 + reg1 (37))
1484: set reg0 to (reg3 (38) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (38) + reg6 (28844))
1495: set reg0 to mem[reg3 (28882)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (37) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 37)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (37) + 1)
1504: if reg1 (38), jump to 1480
1480: set reg3 to (1 + reg1 (38))
1484: set reg0 to (reg3 (39) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (39) + reg6 (28844))
1495: set reg0 to mem[reg3 (28883)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (38) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 38)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (38) + 1)
1504: if reg1 (39), jump to 1480
1480: set reg3 to (1 + reg1 (39))
1484: set reg0 to (reg3 (40) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (40) + reg6 (28844))
1495: set reg0 to mem[reg3 (28884)] (value: 3591)
1498: call to reg5 (1531)
1531: push reg1 (39) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3591) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3591) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (100) (d)
1540: pop stack and write to reg1 (3683) (value: 39)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (39) + 1)
1504: if reg1 (40), jump to 1480
1480: set reg3 to (1 + reg1 (40))
1484: set reg0 to (reg3 (41) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (41) + reg6 (28844))
1495: set reg0 to mem[reg3 (28885)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (40) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 40)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (40) + 1)
1504: if reg1 (41), jump to 1480
1480: set reg3 to (1 + reg1 (41))
1484: set reg0 to (reg3 (42) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (42) + reg6 (28844))
1495: set reg0 to mem[reg3 (28886)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (41) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 41)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (41) + 1)
1504: if reg1 (42), jump to 1480
1480: set reg3 to (1 + reg1 (42))
1484: set reg0 to (reg3 (43) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (43) + reg6 (28844))
1495: set reg0 to mem[reg3 (28887)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (42) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 42)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (42) + 1)
1504: if reg1 (43), jump to 1480
1480: set reg3 to (1 + reg1 (43))
1484: set reg0 to (reg3 (44) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (44) + reg6 (28844))
1495: set reg0 to mem[reg3 (28888)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (43) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 43)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (43) + 1)
1504: if reg1 (44), jump to 1480
1480: set reg3 to (1 + reg1 (44))
1484: set reg0 to (reg3 (45) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (45) + reg6 (28844))
1495: set reg0 to mem[reg3 (28889)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (44) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 44)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (44) + 1)
1504: if reg1 (45), jump to 1480
1480: set reg3 to (1 + reg1 (45))
1484: set reg0 to (reg3 (46) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (46) + reg6 (28844))
1495: set reg0 to mem[reg3 (28890)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (45) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 45)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (45) + 1)
1504: if reg1 (46), jump to 1480
1480: set reg3 to (1 + reg1 (46))
1484: set reg0 to (reg3 (47) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (47) + reg6 (28844))
1495: set reg0 to mem[reg3 (28891)] (value: 3610)
1498: call to reg5 (1531)
1531: push reg1 (46) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3610) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3610) | reg1 (3683))
2140: set reg0 to (reg0 (3707) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (121) (y)
1540: pop stack and write to reg1 (3683) (value: 46)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (46) + 1)
1504: if reg1 (47), jump to 1480
1480: set reg3 to (1 + reg1 (47))
1484: set reg0 to (reg3 (48) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (48) + reg6 (28844))
1495: set reg0 to mem[reg3 (28892)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (47) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 47)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (47) + 1)
1504: if reg1 (48), jump to 1480
1480: set reg3 to (1 + reg1 (48))
1484: set reg0 to (reg3 (49) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (49) + reg6 (28844))
1495: set reg0 to mem[reg3 (28893)] (value: 3606)
1498: call to reg5 (1531)
1531: push reg1 (48) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3606) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3606) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (117) (u)
1540: pop stack and write to reg1 (3683) (value: 48)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (48) + 1)
1504: if reg1 (49), jump to 1480
1480: set reg3 to (1 + reg1 (49))
1484: set reg0 to (reg3 (50) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (50) + reg6 (28844))
1495: set reg0 to mem[reg3 (28894)] (value: 3601)
1498: call to reg5 (1531)
1531: push reg1 (49) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3601) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3601) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (114) (r)
1540: pop stack and write to reg1 (3683) (value: 49)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (49) + 1)
1504: if reg1 (50), jump to 1480
1480: set reg3 to (1 + reg1 (50))
1484: set reg0 to (reg3 (51) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (51) + reg6 (28844))
1495: set reg0 to mem[reg3 (28895)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (50) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 50)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (50) + 1)
1504: if reg1 (51), jump to 1480
1480: set reg3 to (1 + reg1 (51))
1484: set reg0 to (reg3 (52) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (52) + reg6 (28844))
1495: set reg0 to mem[reg3 (28896)] (value: 3598)
1498: call to reg5 (1531)
1531: push reg1 (51) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3598) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3598) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (109) (m)
1540: pop stack and write to reg1 (3683) (value: 51)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (51) + 1)
1504: if reg1 (52), jump to 1480
1480: set reg3 to (1 + reg1 (52))
1484: set reg0 to (reg3 (53) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (53) + reg6 (28844))
1495: set reg0 to mem[reg3 (28897)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (52) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 52)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (52) + 1)
1504: if reg1 (53), jump to 1480
1480: set reg3 to (1 + reg1 (53))
1484: set reg0 to (reg3 (54) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (54) + reg6 (28844))
1495: set reg0 to mem[reg3 (28898)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (53) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 53)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (53) + 1)
1504: if reg1 (54), jump to 1480
1480: set reg3 to (1 + reg1 (54))
1484: set reg0 to (reg3 (55) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (55) + reg6 (28844))
1495: set reg0 to mem[reg3 (28899)] (value: 3591)
1498: call to reg5 (1531)
1531: push reg1 (54) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3591) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3591) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (100) (d)
1540: pop stack and write to reg1 (3683) (value: 54)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (54) + 1)
1504: if reg1 (55), jump to 1480
1480: set reg3 to (1 + reg1 (55))
1484: set reg0 to (reg3 (56) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (56) + reg6 (28844))
1495: set reg0 to mem[reg3 (28900)] (value: 3673)
1498: call to reg5 (1531)
1531: push reg1 (55) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3673) & reg1 (3683))
2133: set reg2 to ~reg2 (3649)
2136: set reg0 to (reg0 (3673) | reg1 (3683))
2140: set reg0 to (reg0 (3707) & reg2 (29118))
2144: pop stack and write to reg2 (29118) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (58) (:)
1540: pop stack and write to reg1 (3683) (value: 55)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (55) + 1)
1504: if reg1 (56), jump to 1480
1480: set reg3 to (1 + reg1 (56))
1484: set reg0 to (reg3 (57) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (57) + reg6 (28844))
1495: set reg0 to mem[reg3 (28901)] (value: 3689)
1498: call to reg5 (1531)
1531: push reg1 (56) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3689) & reg1 (3683))
2133: set reg2 to ~reg2 (3681)
2136: set reg0 to (reg0 (3689) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29086))
2144: pop stack and write to reg2 (29086) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (10) (
)
1540: pop stack and write to reg1 (3683) (value: 56)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (56) + 1)
1504: if reg1 (57), jump to 1480
1480: set reg3 to (1 + reg1 (57))
1484: set reg0 to (reg3 (58) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (58) + reg6 (28844))
1495: set reg0 to mem[reg3 (28902)] (value: 3689)
1498: call to reg5 (1531)
1531: push reg1 (57) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3689) & reg1 (3683))
2133: set reg2 to ~reg2 (3681)
2136: set reg0 to (reg0 (3689) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29086))
2144: pop stack and write to reg2 (29086) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (10) (
)
1540: pop stack and write to reg1 (3683) (value: 57)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (57) + 1)
1504: if reg1 (58), jump to 1480
1480: set reg3 to (1 + reg1 (58))
1484: set reg0 to (reg3 (59) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (59) + reg6 (28844))
1495: set reg0 to mem[reg3 (28903)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (58) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 58)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (58) + 1)
1504: if reg1 (59), jump to 1480
1480: set reg3 to (1 + reg1 (59))
1484: set reg0 to (reg3 (60) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (60) + reg6 (28844))
1495: set reg0 to mem[reg3 (28904)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (59) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 59)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (59) + 1)
1504: if reg1 (60), jump to 1480
1480: set reg3 to (1 + reg1 (60))
1484: set reg0 to (reg3 (61) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (61) + reg6 (28844))
1495: set reg0 to mem[reg3 (28905)] (value: 3649)
1498: call to reg5 (1531)
1531: push reg1 (60) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3649) & reg1 (3683))
2133: set reg2 to ~reg2 (3649)
2136: set reg0 to (reg0 (3649) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29118))
2144: pop stack and write to reg2 (29118) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (34) (")
1540: pop stack and write to reg1 (3683) (value: 60)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (60) + 1)
1504: if reg1 (61), jump to 1480
1480: set reg3 to (1 + reg1 (61))
1484: set reg0 to (reg3 (62) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (62) + reg6 (28844))
1495: set reg0 to mem[reg3 (28906)] (value: 3638)
1498: call to reg5 (1531)
1531: push reg1 (61) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3638) & reg1 (3683))
2133: set reg2 to ~reg2 (3618)
2136: set reg0 to (reg0 (3638) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29149))
2144: pop stack and write to reg2 (29149) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (85) (U)
1540: pop stack and write to reg1 (3683) (value: 61)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (61) + 1)
1504: if reg1 (62), jump to 1480
1480: set reg3 to (1 + reg1 (62))
1484: set reg0 to (reg3 (63) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (63) + reg6 (28844))
1495: set reg0 to mem[reg3 (28907)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (62) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 62)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (62) + 1)
1504: if reg1 (63), jump to 1480
1480: set reg3 to (1 + reg1 (63))
1484: set reg0 to (reg3 (64) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (64) + reg6 (28844))
1495: set reg0 to mem[reg3 (28908)] (value: 3606)
1498: call to reg5 (1531)
1531: push reg1 (63) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3606) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3606) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (117) (u)
1540: pop stack and write to reg1 (3683) (value: 63)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (63) + 1)
1504: if reg1 (64), jump to 1480
1480: set reg3 to (1 + reg1 (64))
1484: set reg0 to (reg3 (65) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (65) + reg6 (28844))
1495: set reg0 to mem[reg3 (28909)] (value: 3600)
1498: call to reg5 (1531)
1531: push reg1 (64) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3600) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3600) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (115) (s)
1540: pop stack and write to reg1 (3683) (value: 64)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (64) + 1)
1504: if reg1 (65), jump to 1480
1480: set reg3 to (1 + reg1 (65))
1484: set reg0 to (reg3 (66) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (66) + reg6 (28844))
1495: set reg0 to mem[reg3 (28910)] (value: 3606)
1498: call to reg5 (1531)
1531: push reg1 (65) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3606) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3606) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (117) (u)
1540: pop stack and write to reg1 (3683) (value: 65)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (65) + 1)
1504: if reg1 (66), jump to 1480
1480: set reg3 to (1 + reg1 (66))
1484: set reg0 to (reg3 (67) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (67) + reg6 (28844))
1495: set reg0 to mem[reg3 (28911)] (value: 3586)
1498: call to reg5 (1531)
1531: push reg1 (66) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3586) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3586) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (97) (a)
1540: pop stack and write to reg1 (3683) (value: 66)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (66) + 1)
1504: if reg1 (67), jump to 1480
1480: set reg3 to (1 + reg1 (67))
1484: set reg0 to (reg3 (68) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (68) + reg6 (28844))
1495: set reg0 to mem[reg3 (28912)] (value: 3599)
1498: call to reg5 (1531)
1531: push reg1 (67) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3599) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3599) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (108) (l)
1540: pop stack and write to reg1 (3683) (value: 67)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (67) + 1)
1504: if reg1 (68), jump to 1480
1480: set reg3 to (1 + reg1 (68))
1484: set reg0 to (reg3 (69) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (69) + reg6 (28844))
1495: set reg0 to mem[reg3 (28913)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (68) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 68)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (68) + 1)
1504: if reg1 (69), jump to 1480
1480: set reg3 to (1 + reg1 (69))
1484: set reg0 to (reg3 (70) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (70) + reg6 (28844))
1495: set reg0 to mem[reg3 (28914)] (value: 3600)
1498: call to reg5 (1531)
1531: push reg1 (69) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3600) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3600) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (115) (s)
1540: pop stack and write to reg1 (3683) (value: 69)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (69) + 1)
1504: if reg1 (70), jump to 1480
1480: set reg3 to (1 + reg1 (70))
1484: set reg0 to (reg3 (71) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (71) + reg6 (28844))
1495: set reg0 to mem[reg3 (28915)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (70) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 70)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (70) + 1)
1504: if reg1 (71), jump to 1480
1480: set reg3 to (1 + reg1 (71))
1484: set reg0 to (reg3 (72) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (72) + reg6 (28844))
1495: set reg0 to mem[reg3 (28916)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (71) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 71)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (71) + 1)
1504: if reg1 (72), jump to 1480
1480: set reg3 to (1 + reg1 (72))
1484: set reg0 to (reg3 (73) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (73) + reg6 (28844))
1495: set reg0 to mem[reg3 (28917)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (72) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 72)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (72) + 1)
1504: if reg1 (73), jump to 1480
1480: set reg3 to (1 + reg1 (73))
1484: set reg0 to (reg3 (74) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (74) + reg6 (28844))
1495: set reg0 to mem[reg3 (28918)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (73) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 73)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (73) + 1)
1504: if reg1 (74), jump to 1480
1480: set reg3 to (1 + reg1 (74))
1484: set reg0 to (reg3 (75) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (75) + reg6 (28844))
1495: set reg0 to mem[reg3 (28919)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (74) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 74)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (74) + 1)
1504: if reg1 (75), jump to 1480
1480: set reg3 to (1 + reg1 (75))
1484: set reg0 to (reg3 (76) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (76) + reg6 (28844))
1495: set reg0 to mem[reg3 (28920)] (value: 3588)
1498: call to reg5 (1531)
1531: push reg1 (75) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3588) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3588) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (103) (g)
1540: pop stack and write to reg1 (3683) (value: 75)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (75) + 1)
1504: if reg1 (76), jump to 1480
1480: set reg3 to (1 + reg1 (76))
1484: set reg0 to (reg3 (77) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (77) + reg6 (28844))
1495: set reg0 to mem[reg3 (28921)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (76) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 76)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (76) + 1)
1504: if reg1 (77), jump to 1480
1480: set reg3 to (1 + reg1 (77))
1484: set reg0 to (reg3 (78) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (78) + reg6 (28844))
1495: set reg0 to mem[reg3 (28922)] (value: 3591)
1498: call to reg5 (1531)
1531: push reg1 (77) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3591) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3591) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (100) (d)
1540: pop stack and write to reg1 (3683) (value: 77)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (77) + 1)
1504: if reg1 (78), jump to 1480
1480: set reg3 to (1 + reg1 (78))
1484: set reg0 to (reg3 (79) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (79) + reg6 (28844))
1495: set reg0 to mem[reg3 (28923)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (78) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 78)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (78) + 1)
1504: if reg1 (79), jump to 1480
1480: set reg3 to (1 + reg1 (79))
1484: set reg0 to (reg3 (80) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (80) + reg6 (28844))
1495: set reg0 to mem[reg3 (28924)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (79) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 79)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (79) + 1)
1504: if reg1 (80), jump to 1480
1480: set reg3 to (1 + reg1 (80))
1484: set reg0 to (reg3 (81) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (81) + reg6 (28844))
1495: set reg0 to mem[reg3 (28925)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (80) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 80)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (80) + 1)
1504: if reg1 (81), jump to 1480
1480: set reg3 to (1 + reg1 (81))
1484: set reg0 to (reg3 (82) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (82) + reg6 (28844))
1495: set reg0 to mem[reg3 (28926)] (value: 3584)
1498: call to reg5 (1531)
1531: push reg1 (81) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3584) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3584) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (99) (c)
1540: pop stack and write to reg1 (3683) (value: 81)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (81) + 1)
1504: if reg1 (82), jump to 1480
1480: set reg3 to (1 + reg1 (82))
1484: set reg0 to (reg3 (83) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (83) + reg6 (28844))
1495: set reg0 to mem[reg3 (28927)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (82) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 82)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (82) + 1)
1504: if reg1 (83), jump to 1480
1480: set reg3 to (1 + reg1 (83))
1484: set reg0 to (reg3 (84) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (84) + reg6 (28844))
1495: set reg0 to mem[reg3 (28928)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (83) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 83)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (83) + 1)
1504: if reg1 (84), jump to 1480
1480: set reg3 to (1 + reg1 (84))
1484: set reg0 to (reg3 (85) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (85) + reg6 (28844))
1495: set reg0 to mem[reg3 (28929)] (value: 3591)
1498: call to reg5 (1531)
1531: push reg1 (84) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3591) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3591) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (100) (d)
1540: pop stack and write to reg1 (3683) (value: 84)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (84) + 1)
1504: if reg1 (85), jump to 1480
1480: set reg3 to (1 + reg1 (85))
1484: set reg0 to (reg3 (86) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (86) + reg6 (28844))
1495: set reg0 to mem[reg3 (28930)] (value: 3650)
1498: call to reg5 (1531)
1531: push reg1 (85) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3650) & reg1 (3683))
2133: set reg2 to ~reg2 (3650)
2136: set reg0 to (reg0 (3650) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29117))
2144: pop stack and write to reg2 (29117) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (33) (!)
1540: pop stack and write to reg1 (3683) (value: 85)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (85) + 1)
1504: if reg1 (86), jump to 1480
1480: set reg3 to (1 + reg1 (86))
1484: set reg0 to (reg3 (87) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (87) + reg6 (28844))
1495: set reg0 to mem[reg3 (28931)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (86) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 86)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (86) + 1)
1504: if reg1 (87), jump to 1480
1480: set reg3 to (1 + reg1 (87))
1484: set reg0 to (reg3 (88) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (88) + reg6 (28844))
1495: set reg0 to mem[reg3 (28932)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (87) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 87)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (87) + 1)
1504: if reg1 (88), jump to 1480
1480: set reg3 to (1 + reg1 (88))
1484: set reg0 to (reg3 (89) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (89) + reg6 (28844))
1495: set reg0 to mem[reg3 (28933)] (value: 3632)
1498: call to reg5 (1531)
1531: push reg1 (88) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3632) & reg1 (3683))
2133: set reg2 to ~reg2 (3616)
2136: set reg0 to (reg0 (3632) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29151))
2144: pop stack and write to reg2 (29151) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (83) (S)
1540: pop stack and write to reg1 (3683) (value: 88)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (88) + 1)
1504: if reg1 (89), jump to 1480
1480: set reg3 to (1 + reg1 (89))
1484: set reg0 to (reg3 (90) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (90) + reg6 (28844))
1495: set reg0 to mem[reg3 (28934)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (89) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 89)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (89) + 1)
1504: if reg1 (90), jump to 1480
1480: set reg3 to (1 + reg1 (90))
1484: set reg0 to (reg3 (91) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (91) + reg6 (28844))
1495: set reg0 to mem[reg3 (28935)] (value: 3586)
1498: call to reg5 (1531)
1531: push reg1 (90) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3586) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3586) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (97) (a)
1540: pop stack and write to reg1 (3683) (value: 90)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (90) + 1)
1504: if reg1 (91), jump to 1480
1480: set reg3 to (1 + reg1 (91))
1484: set reg0 to (reg3 (92) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (92) + reg6 (28844))
1495: set reg0 to mem[reg3 (28936)] (value: 3601)
1498: call to reg5 (1531)
1531: push reg1 (91) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3601) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3601) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (114) (r)
1540: pop stack and write to reg1 (3683) (value: 91)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (91) + 1)
1504: if reg1 (92), jump to 1480
1480: set reg3 to (1 + reg1 (92))
1484: set reg0 to (reg3 (93) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (93) + reg6 (28844))
1495: set reg0 to mem[reg3 (28937)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (92) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 92)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (92) + 1)
1504: if reg1 (93), jump to 1480
1480: set reg3 to (1 + reg1 (93))
1484: set reg0 to (reg3 (94) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (94) + reg6 (28844))
1495: set reg0 to mem[reg3 (28938)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (93) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 93)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (93) + 1)
1504: if reg1 (94), jump to 1480
1480: set reg3 to (1 + reg1 (94))
1484: set reg0 to (reg3 (95) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (95) + reg6 (28844))
1495: set reg0 to mem[reg3 (28939)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (94) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 94)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (94) + 1)
1504: if reg1 (95), jump to 1480
1480: set reg3 to (1 + reg1 (95))
1484: set reg0 to (reg3 (96) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (96) + reg6 (28844))
1495: set reg0 to mem[reg3 (28940)] (value: 3588)
1498: call to reg5 (1531)
1531: push reg1 (95) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3588) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3588) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (103) (g)
1540: pop stack and write to reg1 (3683) (value: 95)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (95) + 1)
1504: if reg1 (96), jump to 1480
1480: set reg3 to (1 + reg1 (96))
1484: set reg0 to (reg3 (97) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (97) + reg6 (28844))
1495: set reg0 to mem[reg3 (28941)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (96) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 96)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (96) + 1)
1504: if reg1 (97), jump to 1480
1480: set reg3 to (1 + reg1 (97))
1484: set reg0 to (reg3 (98) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (98) + reg6 (28844))
1495: set reg0 to mem[reg3 (28942)] (value: 3584)
1498: call to reg5 (1531)
1531: push reg1 (97) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3584) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3584) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (99) (c)
1540: pop stack and write to reg1 (3683) (value: 97)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (97) + 1)
1504: if reg1 (98), jump to 1480
1480: set reg3 to (1 + reg1 (98))
1484: set reg0 to (reg3 (99) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (99) + reg6 (28844))
1495: set reg0 to mem[reg3 (28943)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (98) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 98)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (98) + 1)
1504: if reg1 (99), jump to 1480
1480: set reg3 to (1 + reg1 (99))
1484: set reg0 to (reg3 (100) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (100) + reg6 (28844))
1495: set reg0 to mem[reg3 (28944)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (99) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 99)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (99) + 1)
1504: if reg1 (100), jump to 1480
1480: set reg3 to (1 + reg1 (100))
1484: set reg0 to (reg3 (101) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (101) + reg6 (28844))
1495: set reg0 to mem[reg3 (28945)] (value: 3589)
1498: call to reg5 (1531)
1531: push reg1 (100) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3589) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3589) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (102) (f)
1540: pop stack and write to reg1 (3683) (value: 100)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (100) + 1)
1504: if reg1 (101), jump to 1480
1480: set reg3 to (1 + reg1 (101))
1484: set reg0 to (reg3 (102) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (102) + reg6 (28844))
1495: set reg0 to mem[reg3 (28946)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (101) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 101)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (101) + 1)
1504: if reg1 (102), jump to 1480
1480: set reg3 to (1 + reg1 (102))
1484: set reg0 to (reg3 (103) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (103) + reg6 (28844))
1495: set reg0 to mem[reg3 (28947)] (value: 3601)
1498: call to reg5 (1531)
1531: push reg1 (102) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3601) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3601) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (114) (r)
1540: pop stack and write to reg1 (3683) (value: 102)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (102) + 1)
1504: if reg1 (103), jump to 1480
1480: set reg3 to (1 + reg1 (103))
1484: set reg0 to (reg3 (104) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (104) + reg6 (28844))
1495: set reg0 to mem[reg3 (28948)] (value: 3598)
1498: call to reg5 (1531)
1531: push reg1 (103) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3598) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3598) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (109) (m)
1540: pop stack and write to reg1 (3683) (value: 103)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (103) + 1)
1504: if reg1 (104), jump to 1480
1480: set reg3 to (1 + reg1 (104))
1484: set reg0 to (reg3 (105) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (105) + reg6 (28844))
1495: set reg0 to mem[reg3 (28949)] (value: 3586)
1498: call to reg5 (1531)
1531: push reg1 (104) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3586) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3586) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (97) (a)
1540: pop stack and write to reg1 (3683) (value: 104)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (104) + 1)
1504: if reg1 (105), jump to 1480
1480: set reg3 to (1 + reg1 (105))
1484: set reg0 to (reg3 (106) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (106) + reg6 (28844))
1495: set reg0 to mem[reg3 (28950)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (105) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 105)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (105) + 1)
1504: if reg1 (106), jump to 1480
1480: set reg3 to (1 + reg1 (106))
1484: set reg0 to (reg3 (107) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (107) + reg6 (28844))
1495: set reg0 to mem[reg3 (28951)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (106) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 106)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (106) + 1)
1504: if reg1 (107), jump to 1480
1480: set reg3 to (1 + reg1 (107))
1484: set reg0 to (reg3 (108) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (108) + reg6 (28844))
1495: set reg0 to mem[reg3 (28952)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (107) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 107)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (107) + 1)
1504: if reg1 (108), jump to 1480
1480: set reg3 to (1 + reg1 (108))
1484: set reg0 to (reg3 (109) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (109) + reg6 (28844))
1495: set reg0 to mem[reg3 (28953)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (108) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 108)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (108) + 1)
1504: if reg1 (109), jump to 1480
1480: set reg3 to (1 + reg1 (109))
1484: set reg0 to (reg3 (110) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (110) + reg6 (28844))
1495: set reg0 to mem[reg3 (28954)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (109) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 109)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (109) + 1)
1504: if reg1 (110), jump to 1480
1480: set reg3 to (1 + reg1 (110))
1484: set reg0 to (reg3 (111) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (111) + reg6 (28844))
1495: set reg0 to mem[reg3 (28955)] (value: 3603)
1498: call to reg5 (1531)
1531: push reg1 (110) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3603) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3603) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (112) (p)
1540: pop stack and write to reg1 (3683) (value: 110)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (110) + 1)
1504: if reg1 (111), jump to 1480
1480: set reg3 to (1 + reg1 (111))
1484: set reg0 to (reg3 (112) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (112) + reg6 (28844))
1495: set reg0 to mem[reg3 (28956)] (value: 3601)
1498: call to reg5 (1531)
1531: push reg1 (111) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3601) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3601) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (114) (r)
1540: pop stack and write to reg1 (3683) (value: 111)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (111) + 1)
1504: if reg1 (112), jump to 1480
1480: set reg3 to (1 + reg1 (112))
1484: set reg0 to (reg3 (113) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (113) + reg6 (28844))
1495: set reg0 to mem[reg3 (28957)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (112) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 112)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (112) + 1)
1504: if reg1 (113), jump to 1480
1480: set reg3 to (1 + reg1 (113))
1484: set reg0 to (reg3 (114) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (114) + reg6 (28844))
1495: set reg0 to mem[reg3 (28958)] (value: 3584)
1498: call to reg5 (1531)
1531: push reg1 (113) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3584) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3584) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (99) (c)
1540: pop stack and write to reg1 (3683) (value: 113)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (113) + 1)
1504: if reg1 (114), jump to 1480
1480: set reg3 to (1 + reg1 (114))
1484: set reg0 to (reg3 (115) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (115) + reg6 (28844))
1495: set reg0 to mem[reg3 (28959)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (114) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 114)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (114) + 1)
1504: if reg1 (115), jump to 1480
1480: set reg3 to (1 + reg1 (115))
1484: set reg0 to (reg3 (116) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (116) + reg6 (28844))
1495: set reg0 to mem[reg3 (28960)] (value: 3600)
1498: call to reg5 (1531)
1531: push reg1 (115) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3600) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3600) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (115) (s)
1540: pop stack and write to reg1 (3683) (value: 115)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (115) + 1)
1504: if reg1 (116), jump to 1480
1480: set reg3 to (1 + reg1 (116))
1484: set reg0 to (reg3 (117) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (117) + reg6 (28844))
1495: set reg0 to mem[reg3 (28961)] (value: 3600)
1498: call to reg5 (1531)
1531: push reg1 (116) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3600) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3600) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (115) (s)
1540: pop stack and write to reg1 (3683) (value: 116)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (116) + 1)
1504: if reg1 (117), jump to 1480
1480: set reg3 to (1 + reg1 (117))
1484: set reg0 to (reg3 (118) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (118) + reg6 (28844))
1495: set reg0 to mem[reg3 (28962)] (value: 3650)
1498: call to reg5 (1531)
1531: push reg1 (117) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3650) & reg1 (3683))
2133: set reg2 to ~reg2 (3650)
2136: set reg0 to (reg0 (3650) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29117))
2144: pop stack and write to reg2 (29117) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (33) (!)
1540: pop stack and write to reg1 (3683) (value: 117)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (117) + 1)
1504: if reg1 (118), jump to 1480
1480: set reg3 to (1 + reg1 (118))
1484: set reg0 to (reg3 (119) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (119) + reg6 (28844))
1495: set reg0 to mem[reg3 (28963)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (118) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 118)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (118) + 1)
1504: if reg1 (119), jump to 1480
1480: set reg3 to (1 + reg1 (119))
1484: set reg0 to (reg3 (120) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (120) + reg6 (28844))
1495: set reg0 to mem[reg3 (28964)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (119) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 119)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (119) + 1)
1504: if reg1 (120), jump to 1480
1480: set reg3 to (1 + reg1 (120))
1484: set reg0 to (reg3 (121) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (121) + reg6 (28844))
1495: set reg0 to mem[reg3 (28965)] (value: 3622)
1498: call to reg5 (1531)
1531: push reg1 (120) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3622) & reg1 (3683))
2133: set reg2 to ~reg2 (3618)
2136: set reg0 to (reg0 (3622) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29149))
2144: pop stack and write to reg2 (29149) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (69) (E)
1540: pop stack and write to reg1 (3683) (value: 120)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (120) + 1)
1504: if reg1 (121), jump to 1480
1480: set reg3 to (1 + reg1 (121))
1484: set reg0 to (reg3 (122) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (122) + reg6 (28844))
1495: set reg0 to mem[reg3 (28966)] (value: 3600)
1498: call to reg5 (1531)
1531: push reg1 (121) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3600) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3600) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (115) (s)
1540: pop stack and write to reg1 (3683) (value: 121)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (121) + 1)
1504: if reg1 (122), jump to 1480
1480: set reg3 to (1 + reg1 (122))
1484: set reg0 to (reg3 (123) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (123) + reg6 (28844))
1495: set reg0 to mem[reg3 (28967)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (122) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 122)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (122) + 1)
1504: if reg1 (123), jump to 1480
1480: set reg3 to (1 + reg1 (123))
1484: set reg0 to (reg3 (124) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (124) + reg6 (28844))
1495: set reg0 to mem[reg3 (28968)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (123) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 123)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (123) + 1)
1504: if reg1 (124), jump to 1480
1480: set reg3 to (1 + reg1 (124))
1484: set reg0 to (reg3 (125) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (125) + reg6 (28844))
1495: set reg0 to mem[reg3 (28969)] (value: 3598)
1498: call to reg5 (1531)
1531: push reg1 (124) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3598) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3598) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (109) (m)
1540: pop stack and write to reg1 (3683) (value: 124)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (124) + 1)
1504: if reg1 (125), jump to 1480
1480: set reg3 to (1 + reg1 (125))
1484: set reg0 to (reg3 (126) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (126) + reg6 (28844))
1495: set reg0 to mem[reg3 (28970)] (value: 3586)
1498: call to reg5 (1531)
1531: push reg1 (125) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3586) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3586) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (97) (a)
1540: pop stack and write to reg1 (3683) (value: 125)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (125) + 1)
1504: if reg1 (126), jump to 1480
1480: set reg3 to (1 + reg1 (126))
1484: set reg0 to (reg3 (127) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (127) + reg6 (28844))
1495: set reg0 to mem[reg3 (28971)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (126) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 126)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (126) + 1)
1504: if reg1 (127), jump to 1480
1480: set reg3 to (1 + reg1 (127))
1484: set reg0 to (reg3 (128) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (128) + reg6 (28844))
1495: set reg0 to mem[reg3 (28972)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (127) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 127)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (127) + 1)
1504: if reg1 (128), jump to 1480
1480: set reg3 to (1 + reg1 (128))
1484: set reg0 to (reg3 (129) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (129) + reg6 (28844))
1495: set reg0 to mem[reg3 (28973)] (value: 3591)
1498: call to reg5 (1531)
1531: push reg1 (128) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3591) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3591) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (100) (d)
1540: pop stack and write to reg1 (3683) (value: 128)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (128) + 1)
1504: if reg1 (129), jump to 1480
1480: set reg3 to (1 + reg1 (129))
1484: set reg0 to (reg3 (130) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (130) + reg6 (28844))
1495: set reg0 to mem[reg3 (28974)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (129) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 129)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (129) + 1)
1504: if reg1 (130), jump to 1480
1480: set reg3 to (1 + reg1 (130))
1484: set reg0 to (reg3 (131) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (131) + reg6 (28844))
1495: set reg0 to mem[reg3 (28975)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (130) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 130)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (130) + 1)
1504: if reg1 (131), jump to 1480
1480: set reg3 to (1 + reg1 (131))
1484: set reg0 to (reg3 (132) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (132) + reg6 (28844))
1495: set reg0 to mem[reg3 (28976)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (131) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 131)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (131) + 1)
1504: if reg1 (132), jump to 1480
1480: set reg3 to (1 + reg1 (132))
1484: set reg0 to (reg3 (133) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (133) + reg6 (28844))
1495: set reg0 to mem[reg3 (28977)] (value: 3598)
1498: call to reg5 (1531)
1531: push reg1 (132) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3598) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3598) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (109) (m)
1540: pop stack and write to reg1 (3683) (value: 132)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (132) + 1)
1504: if reg1 (133), jump to 1480
1480: set reg3 to (1 + reg1 (133))
1484: set reg0 to (reg3 (134) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (134) + reg6 (28844))
1495: set reg0 to mem[reg3 (28978)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (133) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 133)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (133) + 1)
1504: if reg1 (134), jump to 1480
1480: set reg3 to (1 + reg1 (134))
1484: set reg0 to (reg3 (135) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (135) + reg6 (28844))
1495: set reg0 to mem[reg3 (28979)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (134) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 134)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (134) + 1)
1504: if reg1 (135), jump to 1480
1480: set reg3 to (1 + reg1 (135))
1484: set reg0 to (reg3 (136) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (136) + reg6 (28844))
1495: set reg0 to mem[reg3 (28980)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (135) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 135)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (135) + 1)
1504: if reg1 (136), jump to 1480
1480: set reg3 to (1 + reg1 (136))
1484: set reg0 to (reg3 (137) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (137) + reg6 (28844))
1495: set reg0 to mem[reg3 (28981)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (136) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 136)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (136) + 1)
1504: if reg1 (137), jump to 1480
1480: set reg3 to (1 + reg1 (137))
1484: set reg0 to (reg3 (138) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (138) + reg6 (28844))
1495: set reg0 to mem[reg3 (28982)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (137) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 137)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (137) + 1)
1504: if reg1 (138), jump to 1480
1480: set reg3 to (1 + reg1 (138))
1484: set reg0 to (reg3 (139) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (139) + reg6 (28844))
1495: set reg0 to mem[reg3 (28983)] (value: 3584)
1498: call to reg5 (1531)
1531: push reg1 (138) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3584) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3584) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (99) (c)
1540: pop stack and write to reg1 (3683) (value: 138)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (138) + 1)
1504: if reg1 (139), jump to 1480
1480: set reg3 to (1 + reg1 (139))
1484: set reg0 to (reg3 (140) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (140) + reg6 (28844))
1495: set reg0 to mem[reg3 (28984)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (139) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 139)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (139) + 1)
1504: if reg1 (140), jump to 1480
1480: set reg3 to (1 + reg1 (140))
1484: set reg0 to (reg3 (141) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (141) + reg6 (28844))
1495: set reg0 to mem[reg3 (28985)] (value: 3598)
1498: call to reg5 (1531)
1531: push reg1 (140) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3598) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3598) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (109) (m)
1540: pop stack and write to reg1 (3683) (value: 140)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (140) + 1)
1504: if reg1 (141), jump to 1480
1480: set reg3 to (1 + reg1 (141))
1484: set reg0 to (reg3 (142) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (142) + reg6 (28844))
1495: set reg0 to mem[reg3 (28986)] (value: 3603)
1498: call to reg5 (1531)
1531: push reg1 (141) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3603) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3603) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (112) (p)
1540: pop stack and write to reg1 (3683) (value: 141)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (141) + 1)
1504: if reg1 (142), jump to 1480
1480: set reg3 to (1 + reg1 (142))
1484: set reg0 to (reg3 (143) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (143) + reg6 (28844))
1495: set reg0 to mem[reg3 (28987)] (value: 3599)
1498: call to reg5 (1531)
1531: push reg1 (142) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3599) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3599) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (108) (l)
1540: pop stack and write to reg1 (3683) (value: 142)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (142) + 1)
1504: if reg1 (143), jump to 1480
1480: set reg3 to (1 + reg1 (143))
1484: set reg0 to (reg3 (144) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (144) + reg6 (28844))
1495: set reg0 to mem[reg3 (28988)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (143) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 143)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (143) + 1)
1504: if reg1 (144), jump to 1480
1480: set reg3 to (1 + reg1 (144))
1484: set reg0 to (reg3 (145) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (145) + reg6 (28844))
1495: set reg0 to mem[reg3 (28989)] (value: 3607)
1498: call to reg5 (1531)
1531: push reg1 (144) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3607) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3607) | reg1 (3683))
2140: set reg0 to (reg0 (3703) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (116) (t)
1540: pop stack and write to reg1 (3683) (value: 144)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (144) + 1)
1504: if reg1 (145), jump to 1480
1480: set reg3 to (1 + reg1 (145))
1484: set reg0 to (reg3 (146) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (146) + reg6 (28844))
1495: set reg0 to mem[reg3 (28990)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (145) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 145)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (145) + 1)
1504: if reg1 (146), jump to 1480
1480: set reg3 to (1 + reg1 (146))
1484: set reg0 to (reg3 (147) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (147) + reg6 (28844))
1495: set reg0 to mem[reg3 (28991)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (146) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 146)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (146) + 1)
1504: if reg1 (147), jump to 1480
1480: set reg3 to (1 + reg1 (147))
1484: set reg0 to (reg3 (148) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (148) + reg6 (28844))
1495: set reg0 to mem[reg3 (28992)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (147) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 147)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (147) + 1)
1504: if reg1 (148), jump to 1480
1480: set reg3 to (1 + reg1 (148))
1484: set reg0 to (reg3 (149) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (149) + reg6 (28844))
1495: set reg0 to mem[reg3 (28993)] (value: 3673)
1498: call to reg5 (1531)
1531: push reg1 (148) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3673) & reg1 (3683))
2133: set reg2 to ~reg2 (3649)
2136: set reg0 to (reg0 (3673) | reg1 (3683))
2140: set reg0 to (reg0 (3707) & reg2 (29118))
2144: pop stack and write to reg2 (29118) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (58) (:)
1540: pop stack and write to reg1 (3683) (value: 148)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (148) + 1)
1504: if reg1 (149), jump to 1480
1480: set reg3 to (1 + reg1 (149))
1484: set reg0 to (reg3 (150) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (150) + reg6 (28844))
1495: set reg0 to mem[reg3 (28994)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (149) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 149)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (149) + 1)
1504: if reg1 (150), jump to 1480
1480: set reg3 to (1 + reg1 (150))
1484: set reg0 to (reg3 (151) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (151) + reg6 (28844))
1495: set reg0 to mem[reg3 (28995)] (value: 3666)
1498: call to reg5 (1531)
1531: push reg1 (150) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3666) & reg1 (3683))
2133: set reg2 to ~reg2 (3650)
2136: set reg0 to (reg0 (3666) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29117))
2144: pop stack and write to reg2 (29117) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (49) (1)
1540: pop stack and write to reg1 (3683) (value: 150)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (150) + 1)
1504: if reg1 (151), jump to 1480
1480: set reg3 to (1 + reg1 (151))
1484: set reg0 to (reg3 (152) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (152) + reg6 (28844))
1495: set reg0 to mem[reg3 (28996)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (151) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 151)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (151) + 1)
1504: if reg1 (152), jump to 1480
1480: set reg3 to (1 + reg1 (152))
1484: set reg0 to (reg3 (153) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (153) + reg6 (28844))
1495: set reg0 to mem[reg3 (28997)] (value: 3585)
1498: call to reg5 (1531)
1531: push reg1 (152) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3585) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3585) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (98) (b)
1540: pop stack and write to reg1 (3683) (value: 152)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (152) + 1)
1504: if reg1 (153), jump to 1480
1480: set reg3 to (1 + reg1 (153))
1484: set reg0 to (reg3 (154) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (154) + reg6 (28844))
1495: set reg0 to mem[reg3 (28998)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (153) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 153)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (153) + 1)
1504: if reg1 (154), jump to 1480
1480: set reg3 to (1 + reg1 (154))
1484: set reg0 to (reg3 (155) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (155) + reg6 (28844))
1495: set reg0 to mem[reg3 (28999)] (value: 3599)
1498: call to reg5 (1531)
1531: push reg1 (154) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3599) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3599) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (108) (l)
1540: pop stack and write to reg1 (3683) (value: 154)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (154) + 1)
1504: if reg1 (155), jump to 1480
1480: set reg3 to (1 + reg1 (155))
1484: set reg0 to (reg3 (156) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (156) + reg6 (28844))
1495: set reg0 to mem[reg3 (29000)] (value: 3599)
1498: call to reg5 (1531)
1531: push reg1 (155) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3599) & reg1 (3683))
2133: set reg2 to ~reg2 (3587)
2136: set reg0 to (reg0 (3599) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29180))
2144: pop stack and write to reg2 (29180) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (108) (l)
1540: pop stack and write to reg1 (3683) (value: 155)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (155) + 1)
1504: if reg1 (156), jump to 1480
1480: set reg3 to (1 + reg1 (156))
1484: set reg0 to (reg3 (157) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (157) + reg6 (28844))
1495: set reg0 to mem[reg3 (29001)] (value: 3594)
1498: call to reg5 (1531)
1531: push reg1 (156) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3594) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3594) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (105) (i)
1540: pop stack and write to reg1 (3683) (value: 156)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (156) + 1)
1504: if reg1 (157), jump to 1480
1480: set reg3 to (1 + reg1 (157))
1484: set reg0 to (reg3 (158) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (158) + reg6 (28844))
1495: set reg0 to mem[reg3 (29002)] (value: 3596)
1498: call to reg5 (1531)
1531: push reg1 (157) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3596) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3596) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (111) (o)
1540: pop stack and write to reg1 (3683) (value: 157)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (157) + 1)
1504: if reg1 (158), jump to 1480
1480: set reg3 to (1 + reg1 (158))
1484: set reg0 to (reg3 (159) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (159) + reg6 (28844))
1495: set reg0 to mem[reg3 (29003)] (value: 3597)
1498: call to reg5 (1531)
1531: push reg1 (158) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3597) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3597) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (110) (n)
1540: pop stack and write to reg1 (3683) (value: 158)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (158) + 1)
1504: if reg1 (159), jump to 1480
1480: set reg3 to (1 + reg1 (159))
1484: set reg0 to (reg3 (160) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (160) + reg6 (28844))
1495: set reg0 to mem[reg3 (29004)] (value: 3651)
1498: call to reg5 (1531)
1531: push reg1 (159) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3651) & reg1 (3683))
2133: set reg2 to ~reg2 (3651)
2136: set reg0 to (reg0 (3651) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29116))
2144: pop stack and write to reg2 (29116) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (32) ( )
1540: pop stack and write to reg1 (3683) (value: 159)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (159) + 1)
1504: if reg1 (160), jump to 1480
1480: set reg3 to (1 + reg1 (160))
1484: set reg0 to (reg3 (161) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (161) + reg6 (28844))
1495: set reg0 to mem[reg3 (29005)] (value: 3610)
1498: call to reg5 (1531)
1531: push reg1 (160) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3610) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3610) | reg1 (3683))
2140: set reg0 to (reg0 (3707) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (121) (y)
1540: pop stack and write to reg1 (3683) (value: 160)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (160) + 1)
1504: if reg1 (161), jump to 1480
1480: set reg3 to (1 + reg1 (161))
1484: set reg0 to (reg3 (162) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (162) + reg6 (28844))
1495: set reg0 to mem[reg3 (29006)] (value: 3590)
1498: call to reg5 (1531)
1531: push reg1 (161) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3590) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3590) | reg1 (3683))
2140: set reg0 to (reg0 (3687) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (101) (e)
1540: pop stack and write to reg1 (3683) (value: 161)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (161) + 1)
1504: if reg1 (162), jump to 1480
1480: set reg3 to (1 + reg1 (162))
1484: set reg0 to (reg3 (163) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (163) + reg6 (28844))
1495: set reg0 to mem[reg3 (29007)] (value: 3586)
1498: call to reg5 (1531)
1531: push reg1 (162) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3586) & reg1 (3683))
2133: set reg2 to ~reg2 (3586)
2136: set reg0 to (reg0 (3586) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29181))
2144: pop stack and write to reg2 (29181) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (97) (a)
1540: pop stack and write to reg1 (3683) (value: 162)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (162) + 1)
1504: if reg1 (163), jump to 1480
1480: set reg3 to (1 + reg1 (163))
1484: set reg0 to (reg3 (164) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (164) + reg6 (28844))
1495: set reg0 to mem[reg3 (29008)] (value: 3601)
1498: call to reg5 (1531)
1531: push reg1 (163) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3601) & reg1 (3683))
2133: set reg2 to ~reg2 (3585)
2136: set reg0 to (reg0 (3601) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29182))
2144: pop stack and write to reg2 (29182) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (114) (r)
1540: pop stack and write to reg1 (3683) (value: 163)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (163) + 1)
1504: if reg1 (164), jump to 1480
1480: set reg3 to (1 + reg1 (164))
1484: set reg0 to (reg3 (165) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (165) + reg6 (28844))
1495: set reg0 to mem[reg3 (29009)] (value: 3600)
1498: call to reg5 (1531)
1531: push reg1 (164) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3600) & reg1 (3683))
2133: set reg2 to ~reg2 (3584)
2136: set reg0 to (reg0 (3600) | reg1 (3683))
2140: set reg0 to (reg0 (3699) & reg2 (29183))
2144: pop stack and write to reg2 (29183) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (115) (s)
1540: pop stack and write to reg1 (3683) (value: 164)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (164) + 1)
1504: if reg1 (165), jump to 1480
1480: set reg3 to (1 + reg1 (165))
1484: set reg0 to (reg3 (166) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (166) + reg6 (28844))
1495: set reg0 to mem[reg3 (29010)] (value: 3661)
1498: call to reg5 (1531)
1531: push reg1 (165) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3661) & reg1 (3683))
2133: set reg2 to ~reg2 (3649)
2136: set reg0 to (reg0 (3661) | reg1 (3683))
2140: set reg0 to (reg0 (3695) & reg2 (29118))
2144: pop stack and write to reg2 (29118) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (46) (.)
1540: pop stack and write to reg1 (3683) (value: 165)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (165) + 1)
1504: if reg1 (166), jump to 1480
1480: set reg3 to (1 + reg1 (166))
1484: set reg0 to (reg3 (167) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (167) + reg6 (28844))
1495: set reg0 to mem[reg3 (29011)] (value: 3649)
1498: call to reg5 (1531)
1531: push reg1 (166) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3649) & reg1 (3683))
2133: set reg2 to ~reg2 (3649)
2136: set reg0 to (reg0 (3649) | reg1 (3683))
2140: set reg0 to (reg0 (3683) & reg2 (29118))
2144: pop stack and write to reg2 (29118) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (34) (")
1540: pop stack and write to reg1 (3683) (value: 166)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (166) + 1)
1504: if reg1 (167), jump to 1480
1480: set reg3 to (1 + reg1 (167))
1484: set reg0 to (reg3 (168) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (168) + reg6 (28844))
1495: set reg0 to mem[reg3 (29012)] (value: 3689)
1498: call to reg5 (1531)
1531: push reg1 (167) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3689) & reg1 (3683))
2133: set reg2 to ~reg2 (3681)
2136: set reg0 to (reg0 (3689) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29086))
2144: pop stack and write to reg2 (29086) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (10) (
)
1540: pop stack and write to reg1 (3683) (value: 167)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (167) + 1)
1504: if reg1 (168), jump to 1480
1480: set reg3 to (1 + reg1 (168))
1484: set reg0 to (reg3 (169) > reg4 (169))
1488: if reg0 (0), jump to 1507
1491: set reg3 to (reg3 (169) + reg6 (28844))
1495: set reg0 to mem[reg3 (29013)] (value: 3689)
1498: call to reg5 (1531)
1531: push reg1 (168) onto stack
1533: set reg1 to reg2 (3683)
1536: call to 2125
2125: push reg1 (3683) onto stack
2127: push reg2 (3683) onto stack
2129: set reg2 to (reg0 (3689) & reg1 (3683))
2133: set reg2 to ~reg2 (3681)
2136: set reg0 to (reg0 (3689) | reg1 (3683))
2140: set reg0 to (reg0 (3691) & reg2 (29086))
2144: pop stack and write to reg2 (29086) (value: 3683)
2146: pop stack and write to reg1 (3683) (value: 3683)
2148: return (addr: 1538)
1538: output reg0 (10) (
)
1540: pop stack and write to reg1 (3683) (value: 168)
1542: return (addr: 1500)
1500: set reg1 to (reg1 (168) + 1)
1504: if reg1 (169), jump to 1480
1480: set reg3 to (1 + reg1 (169))
1484: set reg0 to (reg3 (170) > reg4 (169))
1488: if reg0 (1), jump to 1507
1507: pop stack and write to reg6 (28844) (value: 0)
1509: pop stack and write to reg5 (1531) (value: 0)
1511: pop stack and write to reg4 (169) (value: 101)
1513: pop stack and write to reg3 (170) (value: 10)
1515: pop stack and write to reg0 (1) (value: 28844)
1517: return (addr: 5472)
