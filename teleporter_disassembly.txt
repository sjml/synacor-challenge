5472: pop stack and write to reg2 (3683) (value: 3)
5474: pop stack and write to reg1 (169) (value: 5445)
5476: pop stack and write to reg0 (28844) (value: 2708)
5478: no op
5479: no op
5480: no op
5481: no op
5482: no op
5483: set reg0 to 4
5486: set reg1 to 1
5489: call to 6027
6027: if reg0 (4), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (4) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (4), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (4) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (3) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (2) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 3)
6061: set reg0 to (reg0 (3) + 32767)
6065: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (2) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 4)
6061: set reg0 to (reg0 (4) + 32767)
6065: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (3) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (3), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (3) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (2) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 3)
6061: set reg0 to (reg0 (3) + 32767)
6065: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (2) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 3)
6061: set reg0 to (reg0 (3) + 32767)
6065: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (2) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 3)
6061: set reg0 to (reg0 (3) + 32767)
6065: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (2) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (2), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (2) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (29) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (30)
6059: pop stack and write to reg0 (30) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (30) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (31)
6059: pop stack and write to reg0 (31) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (31), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (31) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (30), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (30) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (29) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (30)
6059: pop stack and write to reg0 (30) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (30) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (31)
6059: pop stack and write to reg0 (31) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (31) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (32)
6059: pop stack and write to reg0 (32) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (32) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (33)
6059: pop stack and write to reg0 (33) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (33), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (33) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (32), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (32) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (31), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (31) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (30), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (30) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (29) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (30)
6059: pop stack and write to reg0 (30) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (30) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (31)
6059: pop stack and write to reg0 (31) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (31) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (32)
6059: pop stack and write to reg0 (32) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (32) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (33)
6059: pop stack and write to reg0 (33) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (33) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (34)
6059: pop stack and write to reg0 (34) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (34) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (35)
6059: pop stack and write to reg0 (35) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (35), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (35) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (34), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (34) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (33), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (33) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (32), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (32) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (31), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (31) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (30), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (30) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (29) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (30)
6059: pop stack and write to reg0 (30) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (30) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (31)
6059: pop stack and write to reg0 (31) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (31) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (32)
6059: pop stack and write to reg0 (32) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (32) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (33)
6059: pop stack and write to reg0 (33) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (33) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (34)
6059: pop stack and write to reg0 (34) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (34) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (35)
6059: pop stack and write to reg0 (35) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (35) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (36)
6059: pop stack and write to reg0 (36) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (36) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (37)
6059: pop stack and write to reg0 (37) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (37), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (37) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (36), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (36) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (35), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (35) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (34), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (34) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (33), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (33) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (32), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (32) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (31), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (31) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (30), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (30) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (29) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (30)
6059: pop stack and write to reg0 (30) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (30) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (31)
6059: pop stack and write to reg0 (31) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (31) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (32)
6059: pop stack and write to reg0 (32) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (32) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (33)
6059: pop stack and write to reg0 (33) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (33) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (34)
6059: pop stack and write to reg0 (34) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (34) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (35)
6059: pop stack and write to reg0 (35) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (35) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (36)
6059: pop stack and write to reg0 (36) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (36) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (37)
6059: pop stack and write to reg0 (37) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (37) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (38)
6059: pop stack and write to reg0 (38) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (38) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (39)
6059: pop stack and write to reg0 (39) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (39), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (39) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (38), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (38) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (37), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (37) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (36), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (36) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (35), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (35) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (34), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (34) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (33), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (33) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (32), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (32) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (31), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (31) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (30), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (30) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (29) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (30)
6059: pop stack and write to reg0 (30) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (30) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (31)
6059: pop stack and write to reg0 (31) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (31) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (32)
6059: pop stack and write to reg0 (32) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (32) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (33)
6059: pop stack and write to reg0 (33) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (33) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (34)
6059: pop stack and write to reg0 (34) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (34) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (35)
6059: pop stack and write to reg0 (35) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (35) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (36)
6059: pop stack and write to reg0 (36) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (36) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (37)
6059: pop stack and write to reg0 (37) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (37) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (38)
6059: pop stack and write to reg0 (38) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (38) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (39)
6059: pop stack and write to reg0 (39) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (39) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (40)
6059: pop stack and write to reg0 (40) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (40) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (41)
6059: pop stack and write to reg0 (41) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (41), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (41) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (40), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (40) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (39), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (39) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (38), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (38) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (37), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (37) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (36), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (36) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (35), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (35) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (34), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (34) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (33), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (33) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (32), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (32) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (31), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (31) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (30), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (30) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (29) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (30)
6059: pop stack and write to reg0 (30) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (30) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (31)
6059: pop stack and write to reg0 (31) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (31) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (32)
6059: pop stack and write to reg0 (32) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (32) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (33)
6059: pop stack and write to reg0 (33) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (33) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (34)
6059: pop stack and write to reg0 (34) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (34) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (35)
6059: pop stack and write to reg0 (35) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (35) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (36)
6059: pop stack and write to reg0 (36) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (36) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (37)
6059: pop stack and write to reg0 (37) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (37) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (38)
6059: pop stack and write to reg0 (38) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (38) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (39)
6059: pop stack and write to reg0 (39) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (39) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (40)
6059: pop stack and write to reg0 (40) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (40) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (41)
6059: pop stack and write to reg0 (41) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (41) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (42)
6059: pop stack and write to reg0 (42) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (42) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (43)
6059: pop stack and write to reg0 (43) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (43), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (43) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (42), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (42) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (41), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (41) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (40), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (40) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (39), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (39) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (38), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (38) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (37), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (37) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (36), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (36) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (35), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (35) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (34), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (34) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (33), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (33) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (32), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (32) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (31), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (31) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (30), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (30) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (3) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (4)
6059: pop stack and write to reg0 (4) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (4) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (5)
6059: pop stack and write to reg0 (5) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (5) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (6)
6059: pop stack and write to reg0 (6) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (6) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (7)
6059: pop stack and write to reg0 (7) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (7) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (8)
6059: pop stack and write to reg0 (8) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (8) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (9)
6059: pop stack and write to reg0 (9) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (9) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (10)
6059: pop stack and write to reg0 (10) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (10) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (11)
6059: pop stack and write to reg0 (11) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (11) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (12)
6059: pop stack and write to reg0 (12) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (12) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (13)
6059: pop stack and write to reg0 (13) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (13) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (14)
6059: pop stack and write to reg0 (14) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (14) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (15)
6059: pop stack and write to reg0 (15) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (15) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (16)
6059: pop stack and write to reg0 (16) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (16) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (17)
6059: pop stack and write to reg0 (17) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (17) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (18)
6059: pop stack and write to reg0 (18) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (18) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (19)
6059: pop stack and write to reg0 (19) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (19) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (20)
6059: pop stack and write to reg0 (20) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (20) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (21)
6059: pop stack and write to reg0 (21) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (21) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (22)
6059: pop stack and write to reg0 (22) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (22) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (23)
6059: pop stack and write to reg0 (23) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (23) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (24)
6059: pop stack and write to reg0 (24) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (24) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (25)
6059: pop stack and write to reg0 (25) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (25) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (26)
6059: pop stack and write to reg0 (26) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (26) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (27)
6059: pop stack and write to reg0 (27) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (27) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (28)
6059: pop stack and write to reg0 (28) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (28) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (29)
6059: pop stack and write to reg0 (29) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (29) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (30)
6059: pop stack and write to reg0 (30) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (30) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (31)
6059: pop stack and write to reg0 (31) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (31) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (32)
6059: pop stack and write to reg0 (32) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (32) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (33)
6059: pop stack and write to reg0 (33) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (33) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (34)
6059: pop stack and write to reg0 (34) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (34) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (35)
6059: pop stack and write to reg0 (35) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (35) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (36)
6059: pop stack and write to reg0 (36) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (36) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (37)
6059: pop stack and write to reg0 (37) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (37) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (38)
6059: pop stack and write to reg0 (38) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (38) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (39)
6059: pop stack and write to reg0 (39) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (39) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (40)
6059: pop stack and write to reg0 (40) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (40) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (41)
6059: pop stack and write to reg0 (41) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (41) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (42)
6059: pop stack and write to reg0 (42) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (42) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (43)
6059: pop stack and write to reg0 (43) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (43) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (44)
6059: pop stack and write to reg0 (44) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (44) + 1)
6034: return (addr: 6067)
6067: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (45)
6059: pop stack and write to reg0 (45) (value: 2)
6061: set reg0 to (reg0 (2) + 32767)
6065: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (45), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (45) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (44), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (44) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (43), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (43) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (42), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (42) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (41), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (41) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (40), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (40) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (39), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (39) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (38), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (38) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (37), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (37) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (36), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (36) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (35), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (35) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (34), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (34) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (33), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (33) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (32), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (32) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (31), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (31) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (30), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (30) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (29), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (29) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (28), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (28) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (27), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (27) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (26), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (26) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (25), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (25) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (24), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (24) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (23), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (23) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (22), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (22) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (21), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (21) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (20), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (20) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (19), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (19) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (18), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (18) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (17), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (17) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (16), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (16) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (15), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (15) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (14), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (14) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (13), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (13) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (12), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (12) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (11), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (11) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (10), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (10) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (9), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (9) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (8), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (8) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (7), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (7) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (6), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (6) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (5), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (5) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (4), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (4) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (3), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (3) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (2), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (2) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (1), jump to 6048
6048: push reg0 (1) onto stack
6050: set reg1 to (reg1 (1) + 32767)
6054: call to 6027
6027: if reg0 (1), jump to 6035
6035: if reg1 (0), jump to 6048
6038: set reg0 to (reg0 (1) + 32767)
6042: set reg1 to reg7 (1)
6045: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (1) + 1)
6034: return (addr: 6047)
6047: return (addr: 6056)
6056: set reg1 to reg0 (2)
6059: pop stack and write to reg0 (2) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
6030: set reg0 to (reg1 (2) + 1)
6034: return (addr: 6067)
6067: return (addr: 6056)
6056: set reg1 to reg0 (3)
6059: pop stack and write to reg0 (3) (value: 1)
6061: set reg0 to (reg0 (1) + 32767)
6065: call to 6027
6027: if reg0 (0), jump to 6035
